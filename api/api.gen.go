// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ErrorResCode.
const (
	N500 ErrorResCode = 500
)

// Defines values for EventTypeEnum.
const (
	EventTypeEnumN1  EventTypeEnum = 1
	EventTypeEnumN11 EventTypeEnum = 11
	EventTypeEnumN12 EventTypeEnum = 12
	EventTypeEnumN13 EventTypeEnum = 13
	EventTypeEnumN14 EventTypeEnum = 14
	EventTypeEnumN15 EventTypeEnum = 15
	EventTypeEnumN20 EventTypeEnum = 20
	EventTypeEnumN30 EventTypeEnum = 30
	EventTypeEnumN40 EventTypeEnum = 40
)

// Defines values for FacilityType.
const (
	FacilityTypeN0 FacilityType = 0
	FacilityTypeN1 FacilityType = 1
	FacilityTypeN2 FacilityType = 2
	FacilityTypeN3 FacilityType = 3
	FacilityTypeN4 FacilityType = 4
)

// Defines values for GuildFundLogFundLogType.
const (
	N1 GuildFundLogFundLogType = 1
	N2 GuildFundLogFundLogType = 2
	N3 GuildFundLogFundLogType = 3
	N4 GuildFundLogFundLogType = 4
)

// Approve 許可する場合、また、+方向のものにtrueを基本とするが APIの内容に合わせて調整する 例： フレンド申請を承認、却下
//
//	true: フレンドになる
//	false: フレンドにならない
//
// 例： ギルド参加申請
//
//	true: ギルドに入れる
//	false: ギルドに入れない
type Approve = bool

// CharacterEvolve defines model for CharacterEvolve.
type CharacterEvolve struct {
	Character CharacterMasterSummery `json:"character"`

	// EvolveNumber 進化順序の番号 id,     number, name "0xaaa",      0, ピチュー "0xbbb",      1, ピカチュウ "0xccc",      2, ライチュウ 0のみで進化先が無いこともある 複数の方向への進化は出来る方がいいかぁ
	EvolveNumber int `json:"evolve_number"`
}

// CharacterMasterSummery defines model for CharacterMasterSummery.
type CharacterMasterSummery struct {
	// Id 各機能で利用されるUUID
	Id Id `json:"id"`

	// Name 種族名
	Name string `json:"name"`
}

// DefaultSuccess defines model for DefaultSuccess.
type DefaultSuccess struct {
	Code int `json:"code"`

	// Message success
	Message string `json:"message"`

	// Parameter hoge
	Parameter string `json:"parameter"`
}

// ErrorRes defines model for ErrorRes.
type ErrorRes struct {
	Code ErrorResCode `json:"code"`

	// Message Internal Server Error
	Message string `json:"message"`
}

// ErrorResCode defines model for ErrorRes.Code.
type ErrorResCode int

// EventDetails defines model for EventDetails.
type EventDetails struct {
	// DescBlock htmlのblockを表示する
	DescBlock string        `json:"desc_block"`
	EventType EventTypeEnum `json:"event_type"`

	// Id 各機能で利用されるUUID
	Id Id `json:"id"`

	// Name イベント名
	Name string `json:"name"`

	// ParentEventId 各機能で利用されるUUID
	ParentEventId *Id `json:"parent_event_id,omitempty"`

	// Since UNIX TIME(JST)
	Since     ExecuteAt `json:"since"`
	Thumbnail string    `json:"thumbnail"`

	// Until UNIX TIME(JST)
	Until ExecuteAt `json:"until"`
}

// EventSummery defines model for EventSummery.
type EventSummery struct {
	EventType EventTypeEnum `json:"event_type"`

	// Id 各機能で利用されるUUID
	Id Id `json:"id"`

	// Name イベント名
	Name string `json:"name"`

	// Since UNIX TIME(JST)
	Since ExecuteAt `json:"since"`

	// Until UNIX TIME(JST)
	Until ExecuteAt `json:"until"`
}

// EventTypeEnum defines model for EventTypeEnum.
type EventTypeEnum int

// ExecuteAt UNIX TIME(JST)
type ExecuteAt = int64

// FacilityType defines model for FacilityType.
type FacilityType int

// Friend defines model for Friend.
type Friend struct {
	// ExecuteAt UNIX TIME(JST)
	ExecuteAt *ExecuteAt `json:"execute_at,omitempty"`

	// Id 各機能で利用されるUUID
	Id   *Id   `json:"id,omitempty"`
	User *User `json:"user,omitempty"`
}

// FriendshipRequestDetails defines model for FriendshipRequestDetails.
type FriendshipRequestDetails struct {
	// ExecuteAt UNIX TIME(JST)
	ExecuteAt   ExecuteAt `json:"execute_at"`
	ExecuteUser *User     `json:"execute_user,omitempty"`

	// Id 各機能で利用されるUUID
	Id Id `json:"id"`
}

// GetCharacterDetailsRes defines model for GetCharacterDetailsRes.
type GetCharacterDetailsRes struct {
	Item CharacterMasterSummery `json:"item"`
}

// GetCharacterEvolveTreeRes defines model for GetCharacterEvolveTreeRes.
type GetCharacterEvolveTreeRes struct {
	Items []CharacterEvolve `json:"items"`
}

// GetCharacterMasterSummeryListRes defines model for GetCharacterMasterSummeryListRes.
type GetCharacterMasterSummeryListRes struct {
	Items []CharacterMasterSummery `json:"items"`
	Pager Pager                    `json:"pager"`
}

// GetEventDetailsRes defines model for GetEventDetailsRes.
type GetEventDetailsRes struct {
	Event EventDetails `json:"event"`
}

// GetEventSummeryListRes defines model for GetEventSummeryListRes.
type GetEventSummeryListRes struct {
	Items []EventSummery `json:"items"`
	Pager Pager          `json:"pager"`
}

// GetFacilitiesRes defines model for GetFacilitiesRes.
type GetFacilitiesRes struct {
	Items []UserHomeFacility `json:"items"`
	Pager Pager              `json:"pager"`
}

// GetFriendRes defines model for GetFriendRes.
type GetFriendRes struct {
	Item Friend `json:"item"`
}

// GetFriendsRes defines model for GetFriendsRes.
type GetFriendsRes struct {
	Items []Friend `json:"items"`
	Pager *Pager   `json:"pager,omitempty"`
}

// GetFriendshipRequestDetailsRes defines model for GetFriendshipRequestDetailsRes.
type GetFriendshipRequestDetailsRes struct {
	Request FriendshipRequestDetails `json:"request"`
}

// GetGuildDetailsRes defines model for GetGuildDetailsRes.
type GetGuildDetailsRes struct {
	Item GuildDetails `json:"item"`
}

// GetGuildFundLogDetailsRes defines model for GetGuildFundLogDetailsRes.
type GetGuildFundLogDetailsRes struct {
	Guild GuildFundLog `json:"guild"`
}

// GetGuildFundLogsRes defines model for GetGuildFundLogsRes.
type GetGuildFundLogsRes struct {
	Items []GuildFundLog `json:"items"`
	Pager Pager          `json:"pager"`
}

// GetGuildFundRes defines model for GetGuildFundRes.
type GetGuildFundRes struct {
	Items []Resource `json:"items"`
}

// GetGuildJoinReqsRes defines model for GetGuildJoinReqsRes.
type GetGuildJoinReqsRes struct {
	Pager    Pager          `json:"pager"`
	Requests []GuildJoinReq `json:"requests"`
}

// GetGuildsRes defines model for GetGuildsRes.
type GetGuildsRes struct {
	Items []GuildDetails `json:"items"`
	Pager Pager          `json:"pager"`
}

// GetMessageRoomChatsRes defines model for GetMessageRoomChatsRes.
type GetMessageRoomChatsRes struct {
	Items []Chat `json:"items"`
	Pager Pager  `json:"pager"`
}

// GetMessageRoomRes defines model for GetMessageRoomRes.
type GetMessageRoomRes struct {
	Item MessageRoom `json:"item"`
}

// GetMessageRoomsRes defines model for GetMessageRoomsRes.
type GetMessageRoomsRes struct {
	Items []MessageRoom `json:"items"`
	Pager Pager         `json:"pager"`
}

// GetUserCharacterDetailsRes defines model for GetUserCharacterDetailsRes.
type GetUserCharacterDetailsRes struct {
	Item UserCharacterDetails `json:"item"`
}

// GetUserCharacterSummeryListRes defines model for GetUserCharacterSummeryListRes.
type GetUserCharacterSummeryListRes struct {
	Items []UserCharacterDetails `json:"items"`
	Pager Pager                  `json:"pager"`
}

// GuildBattleEntryCharacterReq defines model for GuildBattleEntryCharacterReq.
type GuildBattleEntryCharacterReq struct {
	// Items 空の時は全て外す
	Items []Id `json:"items"`
}

// GuildBattleEventMattingSummery defines model for GuildBattleEventMattingSummery.
type GuildBattleEventMattingSummery struct {
	GuildA GuildSummery `json:"guild_a"`
	GuildB GuildSummery `json:"guild_b"`
}

// GuildBattleEventMattingsRes defines model for GuildBattleEventMattingsRes.
type GuildBattleEventMattingsRes struct {
	Items []GuildBattleEventMattingSummery `json:"items"`
}

// GuildBattleEventRes defines model for GuildBattleEventRes.
type GuildBattleEventRes struct {
	Characters UserCharacterDetails `json:"characters"`
	Event      EventDetails         `json:"event"`

	// IsEntry エントリー状況
	IsEntry bool `json:"is_entry"`
}

// GuildBattleEventResultRes defines model for GuildBattleEventResultRes.
type GuildBattleEventResultRes struct {
	Item GuildBattleResult `json:"item"`
}

// GuildBattleEventSummeryResultsRes defines model for GuildBattleEventSummeryResultsRes.
type GuildBattleEventSummeryResultsRes struct {
	Items []GuildBattleResultSummery `json:"items"`
	Pager Pager                      `json:"pager"`
}

// GuildBattleResult defines model for GuildBattleResult.
type GuildBattleResult struct {
	Event     EventDetails `json:"event"`
	LoseGuild GuildSummery `json:"lose_guild"`
	WinGuild  GuildSummery `json:"win_guild"`
}

// GuildBattleResultSummery defines model for GuildBattleResultSummery.
type GuildBattleResultSummery struct {
	EventSummery     EventSummery `json:"event_summery"`
	LoseGuildSummery GuildSummery `json:"lose_guild_summery"`
	WinGuildSummery  GuildSummery `json:"win_guild_summery"`
}

// GuildDetails defines model for GuildDetails.
type GuildDetails struct {
	// CreateAt UNIX TIME(JST)
	CreateAt ExecuteAt `json:"create_at"`

	// GuildBattleWin ギルドバトル勝利数
	GuildBattleWin int  `json:"guild_battle_win"`
	GuildLeader    User `json:"guild_leader"`

	// Icon アイコン設定
	Icon string `json:"icon"`

	// Id 各機能で利用されるUUID
	Id Id `json:"id"`

	// Introduction ギルド紹介
	Introduction string `json:"introduction"`

	// IsPrivate 公開ギルド設定
	IsPrivate bool `json:"is_private"`

	// Level ギルドLv
	Level   int    `json:"level"`
	Members []User `json:"members"`

	// Name ギルド名
	Name string `json:"name"`

	// NeedApprove 加入にメンバーの許可制を取る
	NeedApprove bool `json:"need_approve"`
}

// GuildFundLog defines model for GuildFundLog.
type GuildFundLog struct {
	// ExecuteAt UNIX TIME(JST)
	ExecuteAt   ExecuteAt               `json:"execute_at"`
	FundLogType GuildFundLogFundLogType `json:"fund_log_type"`

	// Id 各機能で利用されるUUID
	Id    Id       `json:"id"`
	Money Resource `json:"money"`

	// Receipt 利用目的を返却
	Receipt string `json:"receipt"`

	// UserName ユーザー名
	UserName string `json:"user_name"`
}

// GuildFundLogFundLogType defines model for GuildFundLog.FundLogType.
type GuildFundLogFundLogType int

// GuildInfoUpdateReq defines model for GuildInfoUpdateReq.
type GuildInfoUpdateReq struct {
	Icon         string `json:"icon"`
	Introduction string `json:"introduction"`
	Name         string `json:"name"`
}

// GuildJoinReq defines model for GuildJoinReq.
type GuildJoinReq struct {
	// Id 各機能で利用されるUUID
	Id   *Id   `json:"id,omitempty"`
	User *User `json:"user,omitempty"`
}

// GuildSummery defines model for GuildSummery.
type GuildSummery struct {
	// Icon アイコン設定
	Icon string `json:"icon"`

	// Id 各機能で利用されるUUID
	Id Id `json:"id"`

	// Name ギルド名
	Name string `json:"name"`
}

// Id 各機能で利用されるUUID
type Id = string

// InviteUsers ユーザーIDのリスト
type InviteUsers struct {
	UserIds *[]string `json:"user_ids,omitempty"`
}

// MessageRoom defines model for MessageRoom.
type MessageRoom struct {
	// HaveUnread 未読メッセージの有無情報
	HaveUnread bool `json:"have_unread"`

	// Icon アイコン設定
	Icon string `json:"icon"`

	// Id 各機能で利用されるUUID
	Id Id `json:"id"`

	// LastMessagedAt UNIX TIME(JST)
	LastMessagedAt ExecuteAt `json:"last_messaged_at"`
	Members        []User    `json:"members"`

	// Name 部屋名
	Name string `json:"name"`
}

// MessageRoomUpdateReq defines model for MessageRoomUpdateReq.
type MessageRoomUpdateReq struct {
	Icon string `json:"icon"`

	// InviteUsers ユーザーIDのリスト
	InviteUsers InviteUsers `json:"invite_users"`
	Name        string      `json:"name"`
}

// Pager defines model for Pager.
type Pager struct {
	// Count データ量
	Count int `json:"count"`

	// Page ページ数
	Page int `json:"page"`

	// PerPage ページに含まれる枚数
	PerPage int `json:"per_page"`
}

// PostCharacterEvolveReq defines model for PostCharacterEvolveReq.
type PostCharacterEvolveReq struct {
	// EvolveTargetCharacterId 各機能で利用されるUUID
	EvolveTargetCharacterId Id `json:"evolve_target_character_id"`
}

// PostCreateUserReq defines model for PostCreateUserReq.
type PostCreateUserReq struct {
	// Name ユーザー名
	Name string `json:"name"`

	// Password user_password
	Password string `json:"password"`
}

// PostMessageRoomChatReq defines model for PostMessageRoomChatReq.
type PostMessageRoomChatReq struct {
	// Item チャット内容
	Item string `json:"item"`
}

// PutFriendshipRequest defines model for PutFriendshipRequest.
type PutFriendshipRequest struct {
	// FriendshipApprove 許可する場合、また、+方向のものにtrueを基本とするが APIの内容に合わせて調整する 例： フレンド申請を承認、却下
	//   true: フレンドになる
	//   false: フレンドにならない
	// 例： ギルド参加申請
	//   true: ギルドに入れる
	//   false: ギルドに入れない
	FriendshipApprove *Approve `json:"friendship_approve,omitempty"`
}

// PutGuildJoinReqApprove defines model for PutGuildJoinReqApprove.
type PutGuildJoinReqApprove struct {
	// JoinApprove 許可する場合、また、+方向のものにtrueを基本とするが APIの内容に合わせて調整する 例： フレンド申請を承認、却下
	//   true: フレンドになる
	//   false: フレンドにならない
	// 例： ギルド参加申請
	//   true: ギルドに入れる
	//   false: ギルドに入れない
	JoinApprove Approve `json:"join_approve"`
}

// PutMessageRoomChatReq defines model for PutMessageRoomChatReq.
type PutMessageRoomChatReq struct {
	// Chat チャット内容
	Chat string `json:"chat"`

	// Id 各機能で利用されるUUID
	Id Id `json:"id"`
}

// Resource defines model for Resource.
type Resource struct {
	// Balance 残高
	Balance int `json:"balance"`

	// ResourceType お金の種別
	ResourceType int `json:"resource_type"`
}

// TargetUserIdReq defines model for TargetUserIdReq.
type TargetUserIdReq struct {
	// Id ユーザーID
	Id *string `json:"id,omitempty"`
}

// User defines model for User.
type User struct {
	Guild        *GuildSummery `json:"guild,omitempty"`
	Icon         string        `json:"icon"`
	Id           *string       `json:"id,omitempty"`
	Introduction string        `json:"introduction"`

	// LastActivityAt Unix Time (jst) 最終操作時刻(ログイン日等の確認用)
	LastActivityAt     int64                `json:"last_activity_at"`
	Name               string               `json:"name"`
	StrongestCharacter UserCharacterDetails `json:"strongest_character"`

	// Wallets 所持金等残高 (※自身の情報取得以外の時は空配列を返却)
	Wallets []Resource `json:"wallets"`
}

// UserCharacterDetails defines model for UserCharacterDetails.
type UserCharacterDetails struct {
	// GetAt UNIX TIME(JST)
	GetAt ExecuteAt `json:"get_at"`

	// Id 各機能で利用されるUUID
	Id Id `json:"id"`

	// Level キャラクターのレベル(経験値)
	Level      int                    `json:"level"`
	Master     CharacterMasterSummery `json:"master"`
	ParentUser UserSummery            `json:"parent_user"`
}

// UserHome defines model for UserHome.
type UserHome struct {
	Facilities []UserHomeLayoutSummery `json:"facilities"`

	// Level ユーザーホームのレベル
	Level  int            `json:"level"`
	Master UserHomeMaster `json:"master"`
	Name   string         `json:"name"`
}

// UserHomeFacility defines model for UserHomeFacility.
type UserHomeFacility struct {
	FacilityType FacilityType `json:"facility_type"`

	// Id 各機能で利用されるUUID
	Id Id `json:"id"`

	// LastReceivedAt UNIX TIME(JST)
	LastReceivedAt ExecuteAt `json:"last_received_at"`

	// Level グレード的な意味でのlevel
	Level int `json:"level"`
}

// UserHomeLayoutSummery defines model for UserHomeLayoutSummery.
type UserHomeLayoutSummery struct {
	// FacilityLevel 施設のレベル
	FacilityLevel int          `json:"facility_level"`
	FacilityType  FacilityType `json:"facility_type"`
	Position      Vector2      `json:"position"`

	// UserFacilityId 各機能で利用されるUUID
	UserFacilityId Id `json:"user_facility_id"`
}

// UserHomeMaster defines model for UserHomeMaster.
type UserHomeMaster struct {
	// Level グレード的な意味でのレベル
	Level int     `json:"level"`
	Scale Vector2 `json:"scale"`
}

// UserSummery defines model for UserSummery.
type UserSummery struct {
	Icon *string `json:"icon,omitempty"`
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Vector2 defines model for Vector2.
type Vector2 struct {
	// X X軸方向
	X int `json:"x"`

	// Y Y軸方向
	Y int `json:"y"`
}

// Chat defines model for chat.
type Chat struct {
	// Id 各機能で利用されるUUID
	Id Id `json:"id"`

	// LastMessagedAt UNIX TIME(JST)
	LastMessagedAt ExecuteAt `json:"last_messaged_at"`

	// Message メッセージ本体
	Message string `json:"message"`
}

// EventId defines model for event_id.
type EventId = string

// EventType defines model for event_type.
type EventType = int

// GuildId defines model for guild_id.
type GuildId = string

// Page defines model for page.
type Page = int

// ParamId defines model for param_id.
type ParamId = string

// PerPage defines model for per_page.
type PerPage = int

// UserId defines model for user_id.
type UserId = string

// DefaultError defines model for DefaultError.
type DefaultError = ErrorRes

// GetCharacterSummeryListParams defines parameters for GetCharacterSummeryList.
type GetCharacterSummeryListParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetEventSummeryListParams defines parameters for GetEventSummeryList.
type GetEventSummeryListParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// EventType 詳細は models/event.yaml にある...(はず)
	EventType *EventType `form:"event_type,omitempty" json:"event_type,omitempty"`
}

// GetFriendshipRequestsParams defines parameters for GetFriendshipRequests.
type GetFriendshipRequestsParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetFriendsParams defines parameters for GetFriends.
type GetFriendsParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetGuildBattleResultsParams defines parameters for GetGuildBattleResults.
type GetGuildBattleResultsParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetGuildFundLogsParams defines parameters for GetGuildFundLogs.
type GetGuildFundLogsParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetGuildJoinReqParams defines parameters for GetGuildJoinReq.
type GetGuildJoinReqParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetGuildsParams defines parameters for GetGuilds.
type GetGuildsParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetMessageRoomsParams defines parameters for GetMessageRooms.
type GetMessageRoomsParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetUserCharacterSummeryListParams defines parameters for GetUserCharacterSummeryList.
type GetUserCharacterSummeryListParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// PostFriendRequestJSONRequestBody defines body for PostFriendRequest for application/json ContentType.
type PostFriendRequestJSONRequestBody = TargetUserIdReq

// PutFriendshipRequestJSONRequestBody defines body for PutFriendshipRequest for application/json ContentType.
type PutFriendshipRequestJSONRequestBody = PutFriendshipRequest

// PostGuildBattleEventEntryJSONRequestBody defines body for PostGuildBattleEventEntry for application/json ContentType.
type PostGuildBattleEventEntryJSONRequestBody = Resource

// PostGuildBattleCharacterRegisterJSONRequestBody defines body for PostGuildBattleCharacterRegister for application/json ContentType.
type PostGuildBattleCharacterRegisterJSONRequestBody = GuildBattleEntryCharacterReq

// PostGuildFundJSONRequestBody defines body for PostGuildFund for application/json ContentType.
type PostGuildFundJSONRequestBody = Resource

// ChangeGuildLeaderJSONRequestBody defines body for ChangeGuildLeader for application/json ContentType.
type ChangeGuildLeaderJSONRequestBody = Id

// PutGuildJSONRequestBody defines body for PutGuild for application/json ContentType.
type PutGuildJSONRequestBody = GuildInfoUpdateReq

// ApproveJoinGuildReqJSONRequestBody defines body for ApproveJoinGuildReq for application/json ContentType.
type ApproveJoinGuildReqJSONRequestBody = PutGuildJoinReqApprove

// CreateGuildJSONRequestBody defines body for CreateGuild for application/json ContentType.
type CreateGuildJSONRequestBody = GuildInfoUpdateReq

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = PostCreateUserReq

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = PostCreateUserReq

// CreateMessageRoomJSONRequestBody defines body for CreateMessageRoom for application/json ContentType.
type CreateMessageRoomJSONRequestBody = MessageRoomUpdateReq

// PutMessageRoomChatJSONRequestBody defines body for PutMessageRoomChat for application/json ContentType.
type PutMessageRoomChatJSONRequestBody = PutMessageRoomChatReq

// PostMessageRoomChatJSONRequestBody defines body for PostMessageRoomChat for application/json ContentType.
type PostMessageRoomChatJSONRequestBody = PostMessageRoomChatReq

// PostEvolveCharacterJSONRequestBody defines body for PostEvolveCharacter for application/json ContentType.
type PostEvolveCharacterJSONRequestBody = PostCharacterEvolveReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCharacterSummeryList request
	GetCharacterSummeryList(ctx context.Context, params *GetCharacterSummeryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharacterDetails request
	GetCharacterDetails(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharacterEvolveTree request
	GetCharacterEvolveTree(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventSummeryList request
	GetEventSummeryList(ctx context.Context, params *GetEventSummeryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventDetails request
	GetEventDetails(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFriendshipRequests request
	GetFriendshipRequests(ctx context.Context, params *GetFriendshipRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFriendRequestWithBody request with any body
	PostFriendRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFriendRequest(ctx context.Context, body PostFriendRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFriendshipRequestDetails request
	GetFriendshipRequestDetails(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFriendshipRequestWithBody request with any body
	PutFriendshipRequestWithBody(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFriendshipRequest(ctx context.Context, id ParamId, body PutFriendshipRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFriend request
	DeleteFriend(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFriend request
	GetFriend(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFriends request
	GetFriends(ctx context.Context, params *GetFriendsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGuildBattleEventEntry request
	DeleteGuildBattleEventEntry(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuildBattleEvents request
	GetGuildBattleEvents(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGuildBattleEventEntryWithBody request with any body
	PostGuildBattleEventEntryWithBody(ctx context.Context, eventId EventId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGuildBattleEventEntry(ctx context.Context, eventId EventId, body PostGuildBattleEventEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuildBattleEventMattings request
	GetGuildBattleEventMattings(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuildBattleEventMattingDetails request
	GetGuildBattleEventMattingDetails(ctx context.Context, eventId EventId, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGuildBattleCharacterRegisterWithBody request with any body
	PostGuildBattleCharacterRegisterWithBody(ctx context.Context, eventId EventId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGuildBattleCharacterRegister(ctx context.Context, eventId EventId, body PostGuildBattleCharacterRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuildBattleLogDetails request
	GetGuildBattleLogDetails(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuildBattleResults request
	GetGuildBattleResults(ctx context.Context, params *GetGuildBattleResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuild request
	GetGuild(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExitGuild request
	ExitGuild(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuildFund request
	GetGuildFund(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGuildFundWithBody request with any body
	PostGuildFundWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGuildFund(ctx context.Context, guildId GuildId, body PostGuildFundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuildFundLogs request
	GetGuildFundLogs(ctx context.Context, guildId GuildId, params *GetGuildFundLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuildFundLogDetails request
	GetGuildFundLogDetails(ctx context.Context, guildId GuildId, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJoinGuildReq request
	DeleteJoinGuildReq(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JoinGuildReqWithBody request with any body
	JoinGuildReqWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeGuildLeaderWithBody request with any body
	ChangeGuildLeaderWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangeGuildLeader(ctx context.Context, guildId GuildId, body ChangeGuildLeaderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGuild request
	DeleteGuild(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGuildWithBody request with any body
	PutGuildWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGuild(ctx context.Context, guildId GuildId, body PutGuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuildJoinReq request
	GetGuildJoinReq(ctx context.Context, guildId GuildId, params *GetGuildJoinReqParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApproveJoinGuildReqWithBody request with any body
	ApproveJoinGuildReqWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApproveJoinGuildReq(ctx context.Context, guildId GuildId, body ApproveJoinGuildReqJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KickGuildMember request
	KickGuildMember(ctx context.Context, guildId GuildId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGuildUpgradeWithBody request with any body
	PostGuildUpgradeWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuilds request
	GetGuilds(ctx context.Context, params *GetGuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGuildWithBody request with any body
	CreateGuildWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGuild(ctx context.Context, body CreateGuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserWithBody request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageRooms request
	GetMessageRooms(ctx context.Context, params *GetMessageRoomsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMessageRoomWithBody request with any body
	CreateMessageRoomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMessageRoom(ctx context.Context, body CreateMessageRoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessageRoom request
	DeleteMessageRoom(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageRoom request
	GetMessageRoom(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessageRoomChat request
	DeleteMessageRoomChat(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMessageRoomChatWithBody request with any body
	PutMessageRoomChatWithBody(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMessageRoomChat(ctx context.Context, id ParamId, body PutMessageRoomChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageRoomChat request
	GetMessageRoomChat(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMessageRoomChatWithBody request with any body
	PostMessageRoomChatWithBody(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMessageRoomChat(ctx context.Context, id ParamId, body PostMessageRoomChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCharacterDetails request
	GetUserCharacterDetails(ctx context.Context, userId UserId, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEvolveCharacterWithBody request with any body
	PostEvolveCharacterWithBody(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEvolveCharacter(ctx context.Context, userId UserId, id ParamId, body PostEvolveCharacterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCharacterExperienceWithBody request with any body
	PostCharacterExperienceWithBody(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserCharacterSummeryList request
	GetUserCharacterSummeryList(ctx context.Context, userId UserId, params *GetUserCharacterSummeryListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserHome request
	GetUserHome(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserHomeUpgradeWithBody request with any body
	PostUserHomeUpgradeWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserFacilities request
	GetUserFacilities(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserHomeFacilityUpgradeWithBody request with any body
	PostUserHomeFacilityUpgradeWithBody(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCharacterSummeryList(ctx context.Context, params *GetCharacterSummeryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharacterSummeryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharacterDetails(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharacterDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharacterEvolveTree(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharacterEvolveTreeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventSummeryList(ctx context.Context, params *GetEventSummeryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventSummeryListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventDetails(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFriendshipRequests(ctx context.Context, params *GetFriendshipRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFriendshipRequestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFriendRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFriendRequestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFriendRequest(ctx context.Context, body PostFriendRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFriendRequestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFriendshipRequestDetails(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFriendshipRequestDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFriendshipRequestWithBody(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFriendshipRequestRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFriendshipRequest(ctx context.Context, id ParamId, body PutFriendshipRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFriendshipRequestRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFriend(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFriendRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFriend(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFriendRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFriends(ctx context.Context, params *GetFriendsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFriendsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGuildBattleEventEntry(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGuildBattleEventEntryRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuildBattleEvents(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildBattleEventsRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGuildBattleEventEntryWithBody(ctx context.Context, eventId EventId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGuildBattleEventEntryRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGuildBattleEventEntry(ctx context.Context, eventId EventId, body PostGuildBattleEventEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGuildBattleEventEntryRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuildBattleEventMattings(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildBattleEventMattingsRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuildBattleEventMattingDetails(ctx context.Context, eventId EventId, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildBattleEventMattingDetailsRequest(c.Server, eventId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGuildBattleCharacterRegisterWithBody(ctx context.Context, eventId EventId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGuildBattleCharacterRegisterRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGuildBattleCharacterRegister(ctx context.Context, eventId EventId, body PostGuildBattleCharacterRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGuildBattleCharacterRegisterRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuildBattleLogDetails(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildBattleLogDetailsRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuildBattleResults(ctx context.Context, params *GetGuildBattleResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildBattleResultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuild(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildRequest(c.Server, guildId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExitGuild(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExitGuildRequest(c.Server, guildId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuildFund(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildFundRequest(c.Server, guildId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGuildFundWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGuildFundRequestWithBody(c.Server, guildId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGuildFund(ctx context.Context, guildId GuildId, body PostGuildFundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGuildFundRequest(c.Server, guildId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuildFundLogs(ctx context.Context, guildId GuildId, params *GetGuildFundLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildFundLogsRequest(c.Server, guildId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuildFundLogDetails(ctx context.Context, guildId GuildId, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildFundLogDetailsRequest(c.Server, guildId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJoinGuildReq(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJoinGuildReqRequest(c.Server, guildId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JoinGuildReqWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJoinGuildReqRequestWithBody(c.Server, guildId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeGuildLeaderWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeGuildLeaderRequestWithBody(c.Server, guildId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeGuildLeader(ctx context.Context, guildId GuildId, body ChangeGuildLeaderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeGuildLeaderRequest(c.Server, guildId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGuild(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGuildRequest(c.Server, guildId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGuildWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGuildRequestWithBody(c.Server, guildId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGuild(ctx context.Context, guildId GuildId, body PutGuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGuildRequest(c.Server, guildId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuildJoinReq(ctx context.Context, guildId GuildId, params *GetGuildJoinReqParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildJoinReqRequest(c.Server, guildId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApproveJoinGuildReqWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApproveJoinGuildReqRequestWithBody(c.Server, guildId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApproveJoinGuildReq(ctx context.Context, guildId GuildId, body ApproveJoinGuildReqJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApproveJoinGuildReqRequest(c.Server, guildId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KickGuildMember(ctx context.Context, guildId GuildId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKickGuildMemberRequest(c.Server, guildId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGuildUpgradeWithBody(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGuildUpgradeRequestWithBody(c.Server, guildId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuilds(ctx context.Context, params *GetGuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGuildWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGuildRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGuild(ctx context.Context, body CreateGuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGuildRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageRooms(ctx context.Context, params *GetMessageRoomsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageRoomsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessageRoomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageRoomRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessageRoom(ctx context.Context, body CreateMessageRoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageRoomRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessageRoom(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessageRoomRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageRoom(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageRoomRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessageRoomChat(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessageRoomChatRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMessageRoomChatWithBody(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMessageRoomChatRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMessageRoomChat(ctx context.Context, id ParamId, body PutMessageRoomChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMessageRoomChatRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageRoomChat(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageRoomChatRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageRoomChatWithBody(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessageRoomChatRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageRoomChat(ctx context.Context, id ParamId, body PostMessageRoomChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessageRoomChatRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCharacterDetails(ctx context.Context, userId UserId, id ParamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCharacterDetailsRequest(c.Server, userId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEvolveCharacterWithBody(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEvolveCharacterRequestWithBody(c.Server, userId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEvolveCharacter(ctx context.Context, userId UserId, id ParamId, body PostEvolveCharacterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEvolveCharacterRequest(c.Server, userId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCharacterExperienceWithBody(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCharacterExperienceRequestWithBody(c.Server, userId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserCharacterSummeryList(ctx context.Context, userId UserId, params *GetUserCharacterSummeryListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCharacterSummeryListRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserHome(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserHomeRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserHomeUpgradeWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserHomeUpgradeRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserFacilities(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserFacilitiesRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserHomeFacilityUpgradeWithBody(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserHomeFacilityUpgradeRequestWithBody(c.Server, userId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCharacterSummeryListRequest generates requests for GetCharacterSummeryList
func NewGetCharacterSummeryListRequest(server string, params *GetCharacterSummeryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/characters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCharacterDetailsRequest generates requests for GetCharacterDetails
func NewGetCharacterDetailsRequest(server string, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/characters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCharacterEvolveTreeRequest generates requests for GetCharacterEvolveTree
func NewGetCharacterEvolveTreeRequest(server string, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/characters/%s/evolve/tree", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventSummeryListRequest generates requests for GetEventSummeryList
func NewGetEventSummeryListRequest(server string, params *GetEventSummeryListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event_type", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventDetailsRequest generates requests for GetEventDetails
func NewGetEventDetailsRequest(server string, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFriendshipRequestsRequest generates requests for GetFriendshipRequests
func NewGetFriendshipRequestsRequest(server string, params *GetFriendshipRequestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/friend/requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFriendRequestRequest calls the generic PostFriendRequest builder with application/json body
func NewPostFriendRequestRequest(server string, body PostFriendRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFriendRequestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFriendRequestRequestWithBody generates requests for PostFriendRequest with any type of body
func NewPostFriendRequestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/friend/requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFriendshipRequestDetailsRequest generates requests for GetFriendshipRequestDetails
func NewGetFriendshipRequestDetailsRequest(server string, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/friend/requests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFriendshipRequestRequest calls the generic PutFriendshipRequest builder with application/json body
func NewPutFriendshipRequestRequest(server string, id ParamId, body PutFriendshipRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFriendshipRequestRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutFriendshipRequestRequestWithBody generates requests for PutFriendshipRequest with any type of body
func NewPutFriendshipRequestRequestWithBody(server string, id ParamId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/friend/requests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFriendRequest generates requests for DeleteFriend
func NewDeleteFriendRequest(server string, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/friend/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFriendRequest generates requests for GetFriend
func NewGetFriendRequest(server string, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/friend/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFriendsRequest generates requests for GetFriends
func NewGetFriendsRequest(server string, params *GetFriendsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/friends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGuildBattleEventEntryRequest generates requests for DeleteGuildBattleEventEntry
func NewDeleteGuildBattleEventEntryRequest(server string, eventId EventId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/battle/event/%s/leader", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGuildBattleEventsRequest generates requests for GetGuildBattleEvents
func NewGetGuildBattleEventsRequest(server string, eventId EventId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/battle/event/%s/leader", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGuildBattleEventEntryRequest calls the generic PostGuildBattleEventEntry builder with application/json body
func NewPostGuildBattleEventEntryRequest(server string, eventId EventId, body PostGuildBattleEventEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGuildBattleEventEntryRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewPostGuildBattleEventEntryRequestWithBody generates requests for PostGuildBattleEventEntry with any type of body
func NewPostGuildBattleEventEntryRequestWithBody(server string, eventId EventId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/battle/event/%s/leader", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGuildBattleEventMattingsRequest generates requests for GetGuildBattleEventMattings
func NewGetGuildBattleEventMattingsRequest(server string, eventId EventId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/battle/event/%s/mattings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGuildBattleEventMattingDetailsRequest generates requests for GetGuildBattleEventMattingDetails
func NewGetGuildBattleEventMattingDetailsRequest(server string, eventId EventId, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/battle/event/%s/mattings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGuildBattleCharacterRegisterRequest calls the generic PostGuildBattleCharacterRegister builder with application/json body
func NewPostGuildBattleCharacterRegisterRequest(server string, eventId EventId, body PostGuildBattleCharacterRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGuildBattleCharacterRegisterRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewPostGuildBattleCharacterRegisterRequestWithBody generates requests for PostGuildBattleCharacterRegister with any type of body
func NewPostGuildBattleCharacterRegisterRequestWithBody(server string, eventId EventId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/battle/event/%s/register", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGuildBattleLogDetailsRequest generates requests for GetGuildBattleLogDetails
func NewGetGuildBattleLogDetailsRequest(server string, eventId EventId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/battle/event/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGuildBattleResultsRequest generates requests for GetGuildBattleResults
func NewGetGuildBattleResultsRequest(server string, params *GetGuildBattleResultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/battle/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGuildRequest generates requests for GetGuild
func NewGetGuildRequest(server string, guildId GuildId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExitGuildRequest generates requests for ExitGuild
func NewExitGuildRequest(server string, guildId GuildId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/exit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGuildFundRequest generates requests for GetGuildFund
func NewGetGuildFundRequest(server string, guildId GuildId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/funds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGuildFundRequest calls the generic PostGuildFund builder with application/json body
func NewPostGuildFundRequest(server string, guildId GuildId, body PostGuildFundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGuildFundRequestWithBody(server, guildId, "application/json", bodyReader)
}

// NewPostGuildFundRequestWithBody generates requests for PostGuildFund with any type of body
func NewPostGuildFundRequestWithBody(server string, guildId GuildId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/funds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGuildFundLogsRequest generates requests for GetGuildFundLogs
func NewGetGuildFundLogsRequest(server string, guildId GuildId, params *GetGuildFundLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/funds/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGuildFundLogDetailsRequest generates requests for GetGuildFundLogDetails
func NewGetGuildFundLogDetailsRequest(server string, guildId GuildId, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/funds/logs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteJoinGuildReqRequest generates requests for DeleteJoinGuildReq
func NewDeleteJoinGuildReqRequest(server string, guildId GuildId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJoinGuildReqRequestWithBody generates requests for JoinGuildReq with any type of body
func NewJoinGuildReqRequestWithBody(server string, guildId GuildId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChangeGuildLeaderRequest calls the generic ChangeGuildLeader builder with application/json body
func NewChangeGuildLeaderRequest(server string, guildId GuildId, body ChangeGuildLeaderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeGuildLeaderRequestWithBody(server, guildId, "application/json", bodyReader)
}

// NewChangeGuildLeaderRequestWithBody generates requests for ChangeGuildLeader with any type of body
func NewChangeGuildLeaderRequestWithBody(server string, guildId GuildId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/leader", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGuildRequest generates requests for DeleteGuild
func NewDeleteGuildRequest(server string, guildId GuildId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/leader/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGuildRequest calls the generic PutGuild builder with application/json body
func NewPutGuildRequest(server string, guildId GuildId, body PutGuildJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGuildRequestWithBody(server, guildId, "application/json", bodyReader)
}

// NewPutGuildRequestWithBody generates requests for PutGuild with any type of body
func NewPutGuildRequestWithBody(server string, guildId GuildId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/leader/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGuildJoinReqRequest generates requests for GetGuildJoinReq
func NewGetGuildJoinReqRequest(server string, guildId GuildId, params *GetGuildJoinReqParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/leader/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApproveJoinGuildReqRequest calls the generic ApproveJoinGuildReq builder with application/json body
func NewApproveJoinGuildReqRequest(server string, guildId GuildId, body ApproveJoinGuildReqJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApproveJoinGuildReqRequestWithBody(server, guildId, "application/json", bodyReader)
}

// NewApproveJoinGuildReqRequestWithBody generates requests for ApproveJoinGuildReq with any type of body
func NewApproveJoinGuildReqRequestWithBody(server string, guildId GuildId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/leader/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKickGuildMemberRequest generates requests for KickGuildMember
func NewKickGuildMemberRequest(server string, guildId GuildId, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/leader/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGuildUpgradeRequestWithBody generates requests for PostGuildUpgrade with any type of body
func NewPostGuildUpgradeRequestWithBody(server string, guildId GuildId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_id", runtime.ParamLocationPath, guildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guild/%s/leader/upgrade", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGuildsRequest generates requests for GetGuilds
func NewGetGuildsRequest(server string, params *GetGuildsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guilds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGuildRequest calls the generic CreateGuild builder with application/json body
func NewCreateGuildRequest(server string, body CreateGuildJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGuildRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGuildRequestWithBody generates requests for CreateGuild with any type of body
func NewCreateGuildRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guilds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessageRoomsRequest generates requests for GetMessageRooms
func NewGetMessageRoomsRequest(server string, params *GetMessageRoomsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/message/room")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMessageRoomRequest calls the generic CreateMessageRoom builder with application/json body
func NewCreateMessageRoomRequest(server string, body CreateMessageRoomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMessageRoomRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMessageRoomRequestWithBody generates requests for CreateMessageRoom with any type of body
func NewCreateMessageRoomRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/message/room")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMessageRoomRequest generates requests for DeleteMessageRoom
func NewDeleteMessageRoomRequest(server string, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/message/room/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessageRoomRequest generates requests for GetMessageRoom
func NewGetMessageRoomRequest(server string, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/message/room/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMessageRoomChatRequest generates requests for DeleteMessageRoomChat
func NewDeleteMessageRoomChatRequest(server string, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/message/room/%s/chat/fix", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMessageRoomChatRequest calls the generic PutMessageRoomChat builder with application/json body
func NewPutMessageRoomChatRequest(server string, id ParamId, body PutMessageRoomChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMessageRoomChatRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutMessageRoomChatRequestWithBody generates requests for PutMessageRoomChat with any type of body
func NewPutMessageRoomChatRequestWithBody(server string, id ParamId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/message/room/%s/chat/fix", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessageRoomChatRequest generates requests for GetMessageRoomChat
func NewGetMessageRoomChatRequest(server string, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/message/room/%s/chats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMessageRoomChatRequest calls the generic PostMessageRoomChat builder with application/json body
func NewPostMessageRoomChatRequest(server string, id ParamId, body PostMessageRoomChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessageRoomChatRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostMessageRoomChatRequestWithBody generates requests for PostMessageRoomChat with any type of body
func NewPostMessageRoomChatRequestWithBody(server string, id ParamId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/message/room/%s/chats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserCharacterDetailsRequest generates requests for GetUserCharacterDetails
func NewGetUserCharacterDetailsRequest(server string, userId UserId, id ParamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/%s/character/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEvolveCharacterRequest calls the generic PostEvolveCharacter builder with application/json body
func NewPostEvolveCharacterRequest(server string, userId UserId, id ParamId, body PostEvolveCharacterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEvolveCharacterRequestWithBody(server, userId, id, "application/json", bodyReader)
}

// NewPostEvolveCharacterRequestWithBody generates requests for PostEvolveCharacter with any type of body
func NewPostEvolveCharacterRequestWithBody(server string, userId UserId, id ParamId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/%s/character/%s/evolve", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCharacterExperienceRequestWithBody generates requests for PostCharacterExperience with any type of body
func NewPostCharacterExperienceRequestWithBody(server string, userId UserId, id ParamId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/%s/character/%s/experience", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserCharacterSummeryListRequest generates requests for GetUserCharacterSummeryList
func NewGetUserCharacterSummeryListRequest(server string, userId UserId, params *GetUserCharacterSummeryListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/%s/characters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserHomeRequest generates requests for GetUserHome
func NewGetUserHomeRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/%s/home", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserHomeUpgradeRequestWithBody generates requests for PostUserHomeUpgrade with any type of body
func NewPostUserHomeUpgradeRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/%s/home", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserFacilitiesRequest generates requests for GetUserFacilities
func NewGetUserFacilitiesRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/%s/home/facility", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserHomeFacilityUpgradeRequestWithBody generates requests for PostUserHomeFacilityUpgrade with any type of body
func NewPostUserHomeFacilityUpgradeRequestWithBody(server string, userId UserId, id ParamId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/%s/home/facility/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCharacterSummeryListWithResponse request
	GetCharacterSummeryListWithResponse(ctx context.Context, params *GetCharacterSummeryListParams, reqEditors ...RequestEditorFn) (*GetCharacterSummeryListResponse, error)

	// GetCharacterDetailsWithResponse request
	GetCharacterDetailsWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetCharacterDetailsResponse, error)

	// GetCharacterEvolveTreeWithResponse request
	GetCharacterEvolveTreeWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetCharacterEvolveTreeResponse, error)

	// GetEventSummeryListWithResponse request
	GetEventSummeryListWithResponse(ctx context.Context, params *GetEventSummeryListParams, reqEditors ...RequestEditorFn) (*GetEventSummeryListResponse, error)

	// GetEventDetailsWithResponse request
	GetEventDetailsWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetEventDetailsResponse, error)

	// GetFriendshipRequestsWithResponse request
	GetFriendshipRequestsWithResponse(ctx context.Context, params *GetFriendshipRequestsParams, reqEditors ...RequestEditorFn) (*GetFriendshipRequestsResponse, error)

	// PostFriendRequestWithBodyWithResponse request with any body
	PostFriendRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFriendRequestResponse, error)

	PostFriendRequestWithResponse(ctx context.Context, body PostFriendRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFriendRequestResponse, error)

	// GetFriendshipRequestDetailsWithResponse request
	GetFriendshipRequestDetailsWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetFriendshipRequestDetailsResponse, error)

	// PutFriendshipRequestWithBodyWithResponse request with any body
	PutFriendshipRequestWithBodyWithResponse(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFriendshipRequestResponse, error)

	PutFriendshipRequestWithResponse(ctx context.Context, id ParamId, body PutFriendshipRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFriendshipRequestResponse, error)

	// DeleteFriendWithResponse request
	DeleteFriendWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*DeleteFriendResponse, error)

	// GetFriendWithResponse request
	GetFriendWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetFriendResponse, error)

	// GetFriendsWithResponse request
	GetFriendsWithResponse(ctx context.Context, params *GetFriendsParams, reqEditors ...RequestEditorFn) (*GetFriendsResponse, error)

	// DeleteGuildBattleEventEntryWithResponse request
	DeleteGuildBattleEventEntryWithResponse(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*DeleteGuildBattleEventEntryResponse, error)

	// GetGuildBattleEventsWithResponse request
	GetGuildBattleEventsWithResponse(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*GetGuildBattleEventsResponse, error)

	// PostGuildBattleEventEntryWithBodyWithResponse request with any body
	PostGuildBattleEventEntryWithBodyWithResponse(ctx context.Context, eventId EventId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGuildBattleEventEntryResponse, error)

	PostGuildBattleEventEntryWithResponse(ctx context.Context, eventId EventId, body PostGuildBattleEventEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGuildBattleEventEntryResponse, error)

	// GetGuildBattleEventMattingsWithResponse request
	GetGuildBattleEventMattingsWithResponse(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*GetGuildBattleEventMattingsResponse, error)

	// GetGuildBattleEventMattingDetailsWithResponse request
	GetGuildBattleEventMattingDetailsWithResponse(ctx context.Context, eventId EventId, id ParamId, reqEditors ...RequestEditorFn) (*GetGuildBattleEventMattingDetailsResponse, error)

	// PostGuildBattleCharacterRegisterWithBodyWithResponse request with any body
	PostGuildBattleCharacterRegisterWithBodyWithResponse(ctx context.Context, eventId EventId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGuildBattleCharacterRegisterResponse, error)

	PostGuildBattleCharacterRegisterWithResponse(ctx context.Context, eventId EventId, body PostGuildBattleCharacterRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGuildBattleCharacterRegisterResponse, error)

	// GetGuildBattleLogDetailsWithResponse request
	GetGuildBattleLogDetailsWithResponse(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*GetGuildBattleLogDetailsResponse, error)

	// GetGuildBattleResultsWithResponse request
	GetGuildBattleResultsWithResponse(ctx context.Context, params *GetGuildBattleResultsParams, reqEditors ...RequestEditorFn) (*GetGuildBattleResultsResponse, error)

	// GetGuildWithResponse request
	GetGuildWithResponse(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*GetGuildResponse, error)

	// ExitGuildWithResponse request
	ExitGuildWithResponse(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*ExitGuildResponse, error)

	// GetGuildFundWithResponse request
	GetGuildFundWithResponse(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*GetGuildFundResponse, error)

	// PostGuildFundWithBodyWithResponse request with any body
	PostGuildFundWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGuildFundResponse, error)

	PostGuildFundWithResponse(ctx context.Context, guildId GuildId, body PostGuildFundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGuildFundResponse, error)

	// GetGuildFundLogsWithResponse request
	GetGuildFundLogsWithResponse(ctx context.Context, guildId GuildId, params *GetGuildFundLogsParams, reqEditors ...RequestEditorFn) (*GetGuildFundLogsResponse, error)

	// GetGuildFundLogDetailsWithResponse request
	GetGuildFundLogDetailsWithResponse(ctx context.Context, guildId GuildId, id ParamId, reqEditors ...RequestEditorFn) (*GetGuildFundLogDetailsResponse, error)

	// DeleteJoinGuildReqWithResponse request
	DeleteJoinGuildReqWithResponse(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*DeleteJoinGuildReqResponse, error)

	// JoinGuildReqWithBodyWithResponse request with any body
	JoinGuildReqWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JoinGuildReqResponse, error)

	// ChangeGuildLeaderWithBodyWithResponse request with any body
	ChangeGuildLeaderWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeGuildLeaderResponse, error)

	ChangeGuildLeaderWithResponse(ctx context.Context, guildId GuildId, body ChangeGuildLeaderJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeGuildLeaderResponse, error)

	// DeleteGuildWithResponse request
	DeleteGuildWithResponse(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*DeleteGuildResponse, error)

	// PutGuildWithBodyWithResponse request with any body
	PutGuildWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGuildResponse, error)

	PutGuildWithResponse(ctx context.Context, guildId GuildId, body PutGuildJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGuildResponse, error)

	// GetGuildJoinReqWithResponse request
	GetGuildJoinReqWithResponse(ctx context.Context, guildId GuildId, params *GetGuildJoinReqParams, reqEditors ...RequestEditorFn) (*GetGuildJoinReqResponse, error)

	// ApproveJoinGuildReqWithBodyWithResponse request with any body
	ApproveJoinGuildReqWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApproveJoinGuildReqResponse, error)

	ApproveJoinGuildReqWithResponse(ctx context.Context, guildId GuildId, body ApproveJoinGuildReqJSONRequestBody, reqEditors ...RequestEditorFn) (*ApproveJoinGuildReqResponse, error)

	// KickGuildMemberWithResponse request
	KickGuildMemberWithResponse(ctx context.Context, guildId GuildId, userId UserId, reqEditors ...RequestEditorFn) (*KickGuildMemberResponse, error)

	// PostGuildUpgradeWithBodyWithResponse request with any body
	PostGuildUpgradeWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGuildUpgradeResponse, error)

	// GetGuildsWithResponse request
	GetGuildsWithResponse(ctx context.Context, params *GetGuildsParams, reqEditors ...RequestEditorFn) (*GetGuildsResponse, error)

	// CreateGuildWithBodyWithResponse request with any body
	CreateGuildWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGuildResponse, error)

	CreateGuildWithResponse(ctx context.Context, body CreateGuildJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGuildResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// GetMeWithResponse request
	GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error)

	// CreateUserWithBodyWithResponse request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// GetMessageRoomsWithResponse request
	GetMessageRoomsWithResponse(ctx context.Context, params *GetMessageRoomsParams, reqEditors ...RequestEditorFn) (*GetMessageRoomsResponse, error)

	// CreateMessageRoomWithBodyWithResponse request with any body
	CreateMessageRoomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageRoomResponse, error)

	CreateMessageRoomWithResponse(ctx context.Context, body CreateMessageRoomJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessageRoomResponse, error)

	// DeleteMessageRoomWithResponse request
	DeleteMessageRoomWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*DeleteMessageRoomResponse, error)

	// GetMessageRoomWithResponse request
	GetMessageRoomWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetMessageRoomResponse, error)

	// DeleteMessageRoomChatWithResponse request
	DeleteMessageRoomChatWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*DeleteMessageRoomChatResponse, error)

	// PutMessageRoomChatWithBodyWithResponse request with any body
	PutMessageRoomChatWithBodyWithResponse(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMessageRoomChatResponse, error)

	PutMessageRoomChatWithResponse(ctx context.Context, id ParamId, body PutMessageRoomChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMessageRoomChatResponse, error)

	// GetMessageRoomChatWithResponse request
	GetMessageRoomChatWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetMessageRoomChatResponse, error)

	// PostMessageRoomChatWithBodyWithResponse request with any body
	PostMessageRoomChatWithBodyWithResponse(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessageRoomChatResponse, error)

	PostMessageRoomChatWithResponse(ctx context.Context, id ParamId, body PostMessageRoomChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessageRoomChatResponse, error)

	// GetUserCharacterDetailsWithResponse request
	GetUserCharacterDetailsWithResponse(ctx context.Context, userId UserId, id ParamId, reqEditors ...RequestEditorFn) (*GetUserCharacterDetailsResponse, error)

	// PostEvolveCharacterWithBodyWithResponse request with any body
	PostEvolveCharacterWithBodyWithResponse(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEvolveCharacterResponse, error)

	PostEvolveCharacterWithResponse(ctx context.Context, userId UserId, id ParamId, body PostEvolveCharacterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEvolveCharacterResponse, error)

	// PostCharacterExperienceWithBodyWithResponse request with any body
	PostCharacterExperienceWithBodyWithResponse(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharacterExperienceResponse, error)

	// GetUserCharacterSummeryListWithResponse request
	GetUserCharacterSummeryListWithResponse(ctx context.Context, userId UserId, params *GetUserCharacterSummeryListParams, reqEditors ...RequestEditorFn) (*GetUserCharacterSummeryListResponse, error)

	// GetUserHomeWithResponse request
	GetUserHomeWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserHomeResponse, error)

	// PostUserHomeUpgradeWithBodyWithResponse request with any body
	PostUserHomeUpgradeWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserHomeUpgradeResponse, error)

	// GetUserFacilitiesWithResponse request
	GetUserFacilitiesWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserFacilitiesResponse, error)

	// PostUserHomeFacilityUpgradeWithBodyWithResponse request with any body
	PostUserHomeFacilityUpgradeWithBodyWithResponse(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserHomeFacilityUpgradeResponse, error)
}

type GetCharacterSummeryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCharacterMasterSummeryListRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCharacterSummeryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharacterSummeryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharacterDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCharacterDetailsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCharacterDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharacterDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharacterEvolveTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCharacterEvolveTreeRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetCharacterEvolveTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharacterEvolveTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventSummeryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEventSummeryListRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetEventSummeryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventSummeryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEventDetailsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetEventDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFriendshipRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFriendshipRequestDetailsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetFriendshipRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFriendshipRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFriendRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostFriendRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFriendRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFriendshipRequestDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFriendshipRequestDetailsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetFriendshipRequestDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFriendshipRequestDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFriendshipRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PutFriendshipRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFriendshipRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFriendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteFriendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFriendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFriendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFriendRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetFriendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFriendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFriendsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFriendsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetFriendsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFriendsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGuildBattleEventEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteGuildBattleEventEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGuildBattleEventEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildBattleEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GuildBattleEventRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildBattleEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildBattleEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGuildBattleEventEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostGuildBattleEventEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGuildBattleEventEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildBattleEventMattingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GuildBattleEventMattingsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildBattleEventMattingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildBattleEventMattingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildBattleEventMattingDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GuildBattleEventResultRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildBattleEventMattingDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildBattleEventMattingDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGuildBattleCharacterRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostGuildBattleCharacterRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGuildBattleCharacterRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildBattleLogDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GuildBattleEventResultRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildBattleLogDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildBattleLogDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildBattleResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GuildBattleEventSummeryResultsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildBattleResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildBattleResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGuildDetailsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExitGuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ExitGuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExitGuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildFundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGuildFundRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildFundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildFundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGuildFundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostGuildFundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGuildFundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildFundLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGuildFundLogsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildFundLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildFundLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildFundLogDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGuildFundLogDetailsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildFundLogDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildFundLogDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJoinGuildReqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteJoinGuildReqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJoinGuildReqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JoinGuildReqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r JoinGuildReqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JoinGuildReqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeGuildLeaderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ChangeGuildLeaderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeGuildLeaderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteGuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PutGuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildJoinReqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGuildJoinReqsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildJoinReqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildJoinReqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApproveJoinGuildReqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ApproveJoinGuildReqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApproveJoinGuildReqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KickGuildMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r KickGuildMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KickGuildMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGuildUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostGuildUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGuildUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetGuildsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateGuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageRoomsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMessageRoomsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMessageRoomsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageRoomsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMessageRoomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateMessageRoomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMessageRoomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessageRoomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteMessageRoomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessageRoomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageRoomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMessageRoomRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMessageRoomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageRoomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessageRoomChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteMessageRoomChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessageRoomChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMessageRoomChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PutMessageRoomChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMessageRoomChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageRoomChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMessageRoomChatsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMessageRoomChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageRoomChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessageRoomChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostMessageRoomChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessageRoomChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCharacterDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUserCharacterDetailsRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetUserCharacterDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCharacterDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEvolveCharacterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostEvolveCharacterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEvolveCharacterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCharacterExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostCharacterExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCharacterExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserCharacterSummeryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUserCharacterSummeryListRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetUserCharacterSummeryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCharacterSummeryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserHomeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserHome
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetUserHomeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserHomeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserHomeUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostUserHomeUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserHomeUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserFacilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFacilitiesRes
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetUserFacilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserFacilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserHomeFacilityUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultSuccess
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostUserHomeFacilityUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserHomeFacilityUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCharacterSummeryListWithResponse request returning *GetCharacterSummeryListResponse
func (c *ClientWithResponses) GetCharacterSummeryListWithResponse(ctx context.Context, params *GetCharacterSummeryListParams, reqEditors ...RequestEditorFn) (*GetCharacterSummeryListResponse, error) {
	rsp, err := c.GetCharacterSummeryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharacterSummeryListResponse(rsp)
}

// GetCharacterDetailsWithResponse request returning *GetCharacterDetailsResponse
func (c *ClientWithResponses) GetCharacterDetailsWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetCharacterDetailsResponse, error) {
	rsp, err := c.GetCharacterDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharacterDetailsResponse(rsp)
}

// GetCharacterEvolveTreeWithResponse request returning *GetCharacterEvolveTreeResponse
func (c *ClientWithResponses) GetCharacterEvolveTreeWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetCharacterEvolveTreeResponse, error) {
	rsp, err := c.GetCharacterEvolveTree(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharacterEvolveTreeResponse(rsp)
}

// GetEventSummeryListWithResponse request returning *GetEventSummeryListResponse
func (c *ClientWithResponses) GetEventSummeryListWithResponse(ctx context.Context, params *GetEventSummeryListParams, reqEditors ...RequestEditorFn) (*GetEventSummeryListResponse, error) {
	rsp, err := c.GetEventSummeryList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventSummeryListResponse(rsp)
}

// GetEventDetailsWithResponse request returning *GetEventDetailsResponse
func (c *ClientWithResponses) GetEventDetailsWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetEventDetailsResponse, error) {
	rsp, err := c.GetEventDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventDetailsResponse(rsp)
}

// GetFriendshipRequestsWithResponse request returning *GetFriendshipRequestsResponse
func (c *ClientWithResponses) GetFriendshipRequestsWithResponse(ctx context.Context, params *GetFriendshipRequestsParams, reqEditors ...RequestEditorFn) (*GetFriendshipRequestsResponse, error) {
	rsp, err := c.GetFriendshipRequests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFriendshipRequestsResponse(rsp)
}

// PostFriendRequestWithBodyWithResponse request with arbitrary body returning *PostFriendRequestResponse
func (c *ClientWithResponses) PostFriendRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFriendRequestResponse, error) {
	rsp, err := c.PostFriendRequestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFriendRequestResponse(rsp)
}

func (c *ClientWithResponses) PostFriendRequestWithResponse(ctx context.Context, body PostFriendRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFriendRequestResponse, error) {
	rsp, err := c.PostFriendRequest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFriendRequestResponse(rsp)
}

// GetFriendshipRequestDetailsWithResponse request returning *GetFriendshipRequestDetailsResponse
func (c *ClientWithResponses) GetFriendshipRequestDetailsWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetFriendshipRequestDetailsResponse, error) {
	rsp, err := c.GetFriendshipRequestDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFriendshipRequestDetailsResponse(rsp)
}

// PutFriendshipRequestWithBodyWithResponse request with arbitrary body returning *PutFriendshipRequestResponse
func (c *ClientWithResponses) PutFriendshipRequestWithBodyWithResponse(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFriendshipRequestResponse, error) {
	rsp, err := c.PutFriendshipRequestWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFriendshipRequestResponse(rsp)
}

func (c *ClientWithResponses) PutFriendshipRequestWithResponse(ctx context.Context, id ParamId, body PutFriendshipRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFriendshipRequestResponse, error) {
	rsp, err := c.PutFriendshipRequest(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFriendshipRequestResponse(rsp)
}

// DeleteFriendWithResponse request returning *DeleteFriendResponse
func (c *ClientWithResponses) DeleteFriendWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*DeleteFriendResponse, error) {
	rsp, err := c.DeleteFriend(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFriendResponse(rsp)
}

// GetFriendWithResponse request returning *GetFriendResponse
func (c *ClientWithResponses) GetFriendWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetFriendResponse, error) {
	rsp, err := c.GetFriend(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFriendResponse(rsp)
}

// GetFriendsWithResponse request returning *GetFriendsResponse
func (c *ClientWithResponses) GetFriendsWithResponse(ctx context.Context, params *GetFriendsParams, reqEditors ...RequestEditorFn) (*GetFriendsResponse, error) {
	rsp, err := c.GetFriends(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFriendsResponse(rsp)
}

// DeleteGuildBattleEventEntryWithResponse request returning *DeleteGuildBattleEventEntryResponse
func (c *ClientWithResponses) DeleteGuildBattleEventEntryWithResponse(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*DeleteGuildBattleEventEntryResponse, error) {
	rsp, err := c.DeleteGuildBattleEventEntry(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGuildBattleEventEntryResponse(rsp)
}

// GetGuildBattleEventsWithResponse request returning *GetGuildBattleEventsResponse
func (c *ClientWithResponses) GetGuildBattleEventsWithResponse(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*GetGuildBattleEventsResponse, error) {
	rsp, err := c.GetGuildBattleEvents(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildBattleEventsResponse(rsp)
}

// PostGuildBattleEventEntryWithBodyWithResponse request with arbitrary body returning *PostGuildBattleEventEntryResponse
func (c *ClientWithResponses) PostGuildBattleEventEntryWithBodyWithResponse(ctx context.Context, eventId EventId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGuildBattleEventEntryResponse, error) {
	rsp, err := c.PostGuildBattleEventEntryWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGuildBattleEventEntryResponse(rsp)
}

func (c *ClientWithResponses) PostGuildBattleEventEntryWithResponse(ctx context.Context, eventId EventId, body PostGuildBattleEventEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGuildBattleEventEntryResponse, error) {
	rsp, err := c.PostGuildBattleEventEntry(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGuildBattleEventEntryResponse(rsp)
}

// GetGuildBattleEventMattingsWithResponse request returning *GetGuildBattleEventMattingsResponse
func (c *ClientWithResponses) GetGuildBattleEventMattingsWithResponse(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*GetGuildBattleEventMattingsResponse, error) {
	rsp, err := c.GetGuildBattleEventMattings(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildBattleEventMattingsResponse(rsp)
}

// GetGuildBattleEventMattingDetailsWithResponse request returning *GetGuildBattleEventMattingDetailsResponse
func (c *ClientWithResponses) GetGuildBattleEventMattingDetailsWithResponse(ctx context.Context, eventId EventId, id ParamId, reqEditors ...RequestEditorFn) (*GetGuildBattleEventMattingDetailsResponse, error) {
	rsp, err := c.GetGuildBattleEventMattingDetails(ctx, eventId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildBattleEventMattingDetailsResponse(rsp)
}

// PostGuildBattleCharacterRegisterWithBodyWithResponse request with arbitrary body returning *PostGuildBattleCharacterRegisterResponse
func (c *ClientWithResponses) PostGuildBattleCharacterRegisterWithBodyWithResponse(ctx context.Context, eventId EventId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGuildBattleCharacterRegisterResponse, error) {
	rsp, err := c.PostGuildBattleCharacterRegisterWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGuildBattleCharacterRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostGuildBattleCharacterRegisterWithResponse(ctx context.Context, eventId EventId, body PostGuildBattleCharacterRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGuildBattleCharacterRegisterResponse, error) {
	rsp, err := c.PostGuildBattleCharacterRegister(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGuildBattleCharacterRegisterResponse(rsp)
}

// GetGuildBattleLogDetailsWithResponse request returning *GetGuildBattleLogDetailsResponse
func (c *ClientWithResponses) GetGuildBattleLogDetailsWithResponse(ctx context.Context, eventId EventId, reqEditors ...RequestEditorFn) (*GetGuildBattleLogDetailsResponse, error) {
	rsp, err := c.GetGuildBattleLogDetails(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildBattleLogDetailsResponse(rsp)
}

// GetGuildBattleResultsWithResponse request returning *GetGuildBattleResultsResponse
func (c *ClientWithResponses) GetGuildBattleResultsWithResponse(ctx context.Context, params *GetGuildBattleResultsParams, reqEditors ...RequestEditorFn) (*GetGuildBattleResultsResponse, error) {
	rsp, err := c.GetGuildBattleResults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildBattleResultsResponse(rsp)
}

// GetGuildWithResponse request returning *GetGuildResponse
func (c *ClientWithResponses) GetGuildWithResponse(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*GetGuildResponse, error) {
	rsp, err := c.GetGuild(ctx, guildId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildResponse(rsp)
}

// ExitGuildWithResponse request returning *ExitGuildResponse
func (c *ClientWithResponses) ExitGuildWithResponse(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*ExitGuildResponse, error) {
	rsp, err := c.ExitGuild(ctx, guildId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExitGuildResponse(rsp)
}

// GetGuildFundWithResponse request returning *GetGuildFundResponse
func (c *ClientWithResponses) GetGuildFundWithResponse(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*GetGuildFundResponse, error) {
	rsp, err := c.GetGuildFund(ctx, guildId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildFundResponse(rsp)
}

// PostGuildFundWithBodyWithResponse request with arbitrary body returning *PostGuildFundResponse
func (c *ClientWithResponses) PostGuildFundWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGuildFundResponse, error) {
	rsp, err := c.PostGuildFundWithBody(ctx, guildId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGuildFundResponse(rsp)
}

func (c *ClientWithResponses) PostGuildFundWithResponse(ctx context.Context, guildId GuildId, body PostGuildFundJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGuildFundResponse, error) {
	rsp, err := c.PostGuildFund(ctx, guildId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGuildFundResponse(rsp)
}

// GetGuildFundLogsWithResponse request returning *GetGuildFundLogsResponse
func (c *ClientWithResponses) GetGuildFundLogsWithResponse(ctx context.Context, guildId GuildId, params *GetGuildFundLogsParams, reqEditors ...RequestEditorFn) (*GetGuildFundLogsResponse, error) {
	rsp, err := c.GetGuildFundLogs(ctx, guildId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildFundLogsResponse(rsp)
}

// GetGuildFundLogDetailsWithResponse request returning *GetGuildFundLogDetailsResponse
func (c *ClientWithResponses) GetGuildFundLogDetailsWithResponse(ctx context.Context, guildId GuildId, id ParamId, reqEditors ...RequestEditorFn) (*GetGuildFundLogDetailsResponse, error) {
	rsp, err := c.GetGuildFundLogDetails(ctx, guildId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildFundLogDetailsResponse(rsp)
}

// DeleteJoinGuildReqWithResponse request returning *DeleteJoinGuildReqResponse
func (c *ClientWithResponses) DeleteJoinGuildReqWithResponse(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*DeleteJoinGuildReqResponse, error) {
	rsp, err := c.DeleteJoinGuildReq(ctx, guildId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJoinGuildReqResponse(rsp)
}

// JoinGuildReqWithBodyWithResponse request with arbitrary body returning *JoinGuildReqResponse
func (c *ClientWithResponses) JoinGuildReqWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JoinGuildReqResponse, error) {
	rsp, err := c.JoinGuildReqWithBody(ctx, guildId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJoinGuildReqResponse(rsp)
}

// ChangeGuildLeaderWithBodyWithResponse request with arbitrary body returning *ChangeGuildLeaderResponse
func (c *ClientWithResponses) ChangeGuildLeaderWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeGuildLeaderResponse, error) {
	rsp, err := c.ChangeGuildLeaderWithBody(ctx, guildId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeGuildLeaderResponse(rsp)
}

func (c *ClientWithResponses) ChangeGuildLeaderWithResponse(ctx context.Context, guildId GuildId, body ChangeGuildLeaderJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeGuildLeaderResponse, error) {
	rsp, err := c.ChangeGuildLeader(ctx, guildId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeGuildLeaderResponse(rsp)
}

// DeleteGuildWithResponse request returning *DeleteGuildResponse
func (c *ClientWithResponses) DeleteGuildWithResponse(ctx context.Context, guildId GuildId, reqEditors ...RequestEditorFn) (*DeleteGuildResponse, error) {
	rsp, err := c.DeleteGuild(ctx, guildId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGuildResponse(rsp)
}

// PutGuildWithBodyWithResponse request with arbitrary body returning *PutGuildResponse
func (c *ClientWithResponses) PutGuildWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGuildResponse, error) {
	rsp, err := c.PutGuildWithBody(ctx, guildId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGuildResponse(rsp)
}

func (c *ClientWithResponses) PutGuildWithResponse(ctx context.Context, guildId GuildId, body PutGuildJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGuildResponse, error) {
	rsp, err := c.PutGuild(ctx, guildId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGuildResponse(rsp)
}

// GetGuildJoinReqWithResponse request returning *GetGuildJoinReqResponse
func (c *ClientWithResponses) GetGuildJoinReqWithResponse(ctx context.Context, guildId GuildId, params *GetGuildJoinReqParams, reqEditors ...RequestEditorFn) (*GetGuildJoinReqResponse, error) {
	rsp, err := c.GetGuildJoinReq(ctx, guildId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildJoinReqResponse(rsp)
}

// ApproveJoinGuildReqWithBodyWithResponse request with arbitrary body returning *ApproveJoinGuildReqResponse
func (c *ClientWithResponses) ApproveJoinGuildReqWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApproveJoinGuildReqResponse, error) {
	rsp, err := c.ApproveJoinGuildReqWithBody(ctx, guildId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApproveJoinGuildReqResponse(rsp)
}

func (c *ClientWithResponses) ApproveJoinGuildReqWithResponse(ctx context.Context, guildId GuildId, body ApproveJoinGuildReqJSONRequestBody, reqEditors ...RequestEditorFn) (*ApproveJoinGuildReqResponse, error) {
	rsp, err := c.ApproveJoinGuildReq(ctx, guildId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApproveJoinGuildReqResponse(rsp)
}

// KickGuildMemberWithResponse request returning *KickGuildMemberResponse
func (c *ClientWithResponses) KickGuildMemberWithResponse(ctx context.Context, guildId GuildId, userId UserId, reqEditors ...RequestEditorFn) (*KickGuildMemberResponse, error) {
	rsp, err := c.KickGuildMember(ctx, guildId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKickGuildMemberResponse(rsp)
}

// PostGuildUpgradeWithBodyWithResponse request with arbitrary body returning *PostGuildUpgradeResponse
func (c *ClientWithResponses) PostGuildUpgradeWithBodyWithResponse(ctx context.Context, guildId GuildId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGuildUpgradeResponse, error) {
	rsp, err := c.PostGuildUpgradeWithBody(ctx, guildId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGuildUpgradeResponse(rsp)
}

// GetGuildsWithResponse request returning *GetGuildsResponse
func (c *ClientWithResponses) GetGuildsWithResponse(ctx context.Context, params *GetGuildsParams, reqEditors ...RequestEditorFn) (*GetGuildsResponse, error) {
	rsp, err := c.GetGuilds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildsResponse(rsp)
}

// CreateGuildWithBodyWithResponse request with arbitrary body returning *CreateGuildResponse
func (c *ClientWithResponses) CreateGuildWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGuildResponse, error) {
	rsp, err := c.CreateGuildWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGuildResponse(rsp)
}

func (c *ClientWithResponses) CreateGuildWithResponse(ctx context.Context, body CreateGuildJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGuildResponse, error) {
	rsp, err := c.CreateGuild(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGuildResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// GetMessageRoomsWithResponse request returning *GetMessageRoomsResponse
func (c *ClientWithResponses) GetMessageRoomsWithResponse(ctx context.Context, params *GetMessageRoomsParams, reqEditors ...RequestEditorFn) (*GetMessageRoomsResponse, error) {
	rsp, err := c.GetMessageRooms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageRoomsResponse(rsp)
}

// CreateMessageRoomWithBodyWithResponse request with arbitrary body returning *CreateMessageRoomResponse
func (c *ClientWithResponses) CreateMessageRoomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageRoomResponse, error) {
	rsp, err := c.CreateMessageRoomWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageRoomResponse(rsp)
}

func (c *ClientWithResponses) CreateMessageRoomWithResponse(ctx context.Context, body CreateMessageRoomJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessageRoomResponse, error) {
	rsp, err := c.CreateMessageRoom(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageRoomResponse(rsp)
}

// DeleteMessageRoomWithResponse request returning *DeleteMessageRoomResponse
func (c *ClientWithResponses) DeleteMessageRoomWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*DeleteMessageRoomResponse, error) {
	rsp, err := c.DeleteMessageRoom(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageRoomResponse(rsp)
}

// GetMessageRoomWithResponse request returning *GetMessageRoomResponse
func (c *ClientWithResponses) GetMessageRoomWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetMessageRoomResponse, error) {
	rsp, err := c.GetMessageRoom(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageRoomResponse(rsp)
}

// DeleteMessageRoomChatWithResponse request returning *DeleteMessageRoomChatResponse
func (c *ClientWithResponses) DeleteMessageRoomChatWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*DeleteMessageRoomChatResponse, error) {
	rsp, err := c.DeleteMessageRoomChat(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageRoomChatResponse(rsp)
}

// PutMessageRoomChatWithBodyWithResponse request with arbitrary body returning *PutMessageRoomChatResponse
func (c *ClientWithResponses) PutMessageRoomChatWithBodyWithResponse(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMessageRoomChatResponse, error) {
	rsp, err := c.PutMessageRoomChatWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMessageRoomChatResponse(rsp)
}

func (c *ClientWithResponses) PutMessageRoomChatWithResponse(ctx context.Context, id ParamId, body PutMessageRoomChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMessageRoomChatResponse, error) {
	rsp, err := c.PutMessageRoomChat(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMessageRoomChatResponse(rsp)
}

// GetMessageRoomChatWithResponse request returning *GetMessageRoomChatResponse
func (c *ClientWithResponses) GetMessageRoomChatWithResponse(ctx context.Context, id ParamId, reqEditors ...RequestEditorFn) (*GetMessageRoomChatResponse, error) {
	rsp, err := c.GetMessageRoomChat(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageRoomChatResponse(rsp)
}

// PostMessageRoomChatWithBodyWithResponse request with arbitrary body returning *PostMessageRoomChatResponse
func (c *ClientWithResponses) PostMessageRoomChatWithBodyWithResponse(ctx context.Context, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessageRoomChatResponse, error) {
	rsp, err := c.PostMessageRoomChatWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageRoomChatResponse(rsp)
}

func (c *ClientWithResponses) PostMessageRoomChatWithResponse(ctx context.Context, id ParamId, body PostMessageRoomChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessageRoomChatResponse, error) {
	rsp, err := c.PostMessageRoomChat(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageRoomChatResponse(rsp)
}

// GetUserCharacterDetailsWithResponse request returning *GetUserCharacterDetailsResponse
func (c *ClientWithResponses) GetUserCharacterDetailsWithResponse(ctx context.Context, userId UserId, id ParamId, reqEditors ...RequestEditorFn) (*GetUserCharacterDetailsResponse, error) {
	rsp, err := c.GetUserCharacterDetails(ctx, userId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCharacterDetailsResponse(rsp)
}

// PostEvolveCharacterWithBodyWithResponse request with arbitrary body returning *PostEvolveCharacterResponse
func (c *ClientWithResponses) PostEvolveCharacterWithBodyWithResponse(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEvolveCharacterResponse, error) {
	rsp, err := c.PostEvolveCharacterWithBody(ctx, userId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEvolveCharacterResponse(rsp)
}

func (c *ClientWithResponses) PostEvolveCharacterWithResponse(ctx context.Context, userId UserId, id ParamId, body PostEvolveCharacterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEvolveCharacterResponse, error) {
	rsp, err := c.PostEvolveCharacter(ctx, userId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEvolveCharacterResponse(rsp)
}

// PostCharacterExperienceWithBodyWithResponse request with arbitrary body returning *PostCharacterExperienceResponse
func (c *ClientWithResponses) PostCharacterExperienceWithBodyWithResponse(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCharacterExperienceResponse, error) {
	rsp, err := c.PostCharacterExperienceWithBody(ctx, userId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCharacterExperienceResponse(rsp)
}

// GetUserCharacterSummeryListWithResponse request returning *GetUserCharacterSummeryListResponse
func (c *ClientWithResponses) GetUserCharacterSummeryListWithResponse(ctx context.Context, userId UserId, params *GetUserCharacterSummeryListParams, reqEditors ...RequestEditorFn) (*GetUserCharacterSummeryListResponse, error) {
	rsp, err := c.GetUserCharacterSummeryList(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCharacterSummeryListResponse(rsp)
}

// GetUserHomeWithResponse request returning *GetUserHomeResponse
func (c *ClientWithResponses) GetUserHomeWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserHomeResponse, error) {
	rsp, err := c.GetUserHome(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserHomeResponse(rsp)
}

// PostUserHomeUpgradeWithBodyWithResponse request with arbitrary body returning *PostUserHomeUpgradeResponse
func (c *ClientWithResponses) PostUserHomeUpgradeWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserHomeUpgradeResponse, error) {
	rsp, err := c.PostUserHomeUpgradeWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserHomeUpgradeResponse(rsp)
}

// GetUserFacilitiesWithResponse request returning *GetUserFacilitiesResponse
func (c *ClientWithResponses) GetUserFacilitiesWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserFacilitiesResponse, error) {
	rsp, err := c.GetUserFacilities(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserFacilitiesResponse(rsp)
}

// PostUserHomeFacilityUpgradeWithBodyWithResponse request with arbitrary body returning *PostUserHomeFacilityUpgradeResponse
func (c *ClientWithResponses) PostUserHomeFacilityUpgradeWithBodyWithResponse(ctx context.Context, userId UserId, id ParamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserHomeFacilityUpgradeResponse, error) {
	rsp, err := c.PostUserHomeFacilityUpgradeWithBody(ctx, userId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserHomeFacilityUpgradeResponse(rsp)
}

// ParseGetCharacterSummeryListResponse parses an HTTP response from a GetCharacterSummeryListWithResponse call
func ParseGetCharacterSummeryListResponse(rsp *http.Response) (*GetCharacterSummeryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharacterSummeryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCharacterMasterSummeryListRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharacterDetailsResponse parses an HTTP response from a GetCharacterDetailsWithResponse call
func ParseGetCharacterDetailsResponse(rsp *http.Response) (*GetCharacterDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharacterDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCharacterDetailsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCharacterEvolveTreeResponse parses an HTTP response from a GetCharacterEvolveTreeWithResponse call
func ParseGetCharacterEvolveTreeResponse(rsp *http.Response) (*GetCharacterEvolveTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharacterEvolveTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCharacterEvolveTreeRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetEventSummeryListResponse parses an HTTP response from a GetEventSummeryListWithResponse call
func ParseGetEventSummeryListResponse(rsp *http.Response) (*GetEventSummeryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventSummeryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEventSummeryListRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetEventDetailsResponse parses an HTTP response from a GetEventDetailsWithResponse call
func ParseGetEventDetailsResponse(rsp *http.Response) (*GetEventDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEventDetailsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFriendshipRequestsResponse parses an HTTP response from a GetFriendshipRequestsWithResponse call
func ParseGetFriendshipRequestsResponse(rsp *http.Response) (*GetFriendshipRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFriendshipRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFriendshipRequestDetailsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostFriendRequestResponse parses an HTTP response from a PostFriendRequestWithResponse call
func ParsePostFriendRequestResponse(rsp *http.Response) (*PostFriendRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFriendRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFriendshipRequestDetailsResponse parses an HTTP response from a GetFriendshipRequestDetailsWithResponse call
func ParseGetFriendshipRequestDetailsResponse(rsp *http.Response) (*GetFriendshipRequestDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFriendshipRequestDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFriendshipRequestDetailsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutFriendshipRequestResponse parses an HTTP response from a PutFriendshipRequestWithResponse call
func ParsePutFriendshipRequestResponse(rsp *http.Response) (*PutFriendshipRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFriendshipRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFriendResponse parses an HTTP response from a DeleteFriendWithResponse call
func ParseDeleteFriendResponse(rsp *http.Response) (*DeleteFriendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFriendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFriendResponse parses an HTTP response from a GetFriendWithResponse call
func ParseGetFriendResponse(rsp *http.Response) (*GetFriendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFriendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFriendRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFriendsResponse parses an HTTP response from a GetFriendsWithResponse call
func ParseGetFriendsResponse(rsp *http.Response) (*GetFriendsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFriendsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFriendsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteGuildBattleEventEntryResponse parses an HTTP response from a DeleteGuildBattleEventEntryWithResponse call
func ParseDeleteGuildBattleEventEntryResponse(rsp *http.Response) (*DeleteGuildBattleEventEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGuildBattleEventEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildBattleEventsResponse parses an HTTP response from a GetGuildBattleEventsWithResponse call
func ParseGetGuildBattleEventsResponse(rsp *http.Response) (*GetGuildBattleEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildBattleEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GuildBattleEventRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGuildBattleEventEntryResponse parses an HTTP response from a PostGuildBattleEventEntryWithResponse call
func ParsePostGuildBattleEventEntryResponse(rsp *http.Response) (*PostGuildBattleEventEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGuildBattleEventEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildBattleEventMattingsResponse parses an HTTP response from a GetGuildBattleEventMattingsWithResponse call
func ParseGetGuildBattleEventMattingsResponse(rsp *http.Response) (*GetGuildBattleEventMattingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildBattleEventMattingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GuildBattleEventMattingsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildBattleEventMattingDetailsResponse parses an HTTP response from a GetGuildBattleEventMattingDetailsWithResponse call
func ParseGetGuildBattleEventMattingDetailsResponse(rsp *http.Response) (*GetGuildBattleEventMattingDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildBattleEventMattingDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GuildBattleEventResultRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGuildBattleCharacterRegisterResponse parses an HTTP response from a PostGuildBattleCharacterRegisterWithResponse call
func ParsePostGuildBattleCharacterRegisterResponse(rsp *http.Response) (*PostGuildBattleCharacterRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGuildBattleCharacterRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildBattleLogDetailsResponse parses an HTTP response from a GetGuildBattleLogDetailsWithResponse call
func ParseGetGuildBattleLogDetailsResponse(rsp *http.Response) (*GetGuildBattleLogDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildBattleLogDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GuildBattleEventResultRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildBattleResultsResponse parses an HTTP response from a GetGuildBattleResultsWithResponse call
func ParseGetGuildBattleResultsResponse(rsp *http.Response) (*GetGuildBattleResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildBattleResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GuildBattleEventSummeryResultsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildResponse parses an HTTP response from a GetGuildWithResponse call
func ParseGetGuildResponse(rsp *http.Response) (*GetGuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGuildDetailsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseExitGuildResponse parses an HTTP response from a ExitGuildWithResponse call
func ParseExitGuildResponse(rsp *http.Response) (*ExitGuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExitGuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildFundResponse parses an HTTP response from a GetGuildFundWithResponse call
func ParseGetGuildFundResponse(rsp *http.Response) (*GetGuildFundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildFundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGuildFundRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGuildFundResponse parses an HTTP response from a PostGuildFundWithResponse call
func ParsePostGuildFundResponse(rsp *http.Response) (*PostGuildFundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGuildFundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildFundLogsResponse parses an HTTP response from a GetGuildFundLogsWithResponse call
func ParseGetGuildFundLogsResponse(rsp *http.Response) (*GetGuildFundLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildFundLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGuildFundLogsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildFundLogDetailsResponse parses an HTTP response from a GetGuildFundLogDetailsWithResponse call
func ParseGetGuildFundLogDetailsResponse(rsp *http.Response) (*GetGuildFundLogDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildFundLogDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGuildFundLogDetailsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteJoinGuildReqResponse parses an HTTP response from a DeleteJoinGuildReqWithResponse call
func ParseDeleteJoinGuildReqResponse(rsp *http.Response) (*DeleteJoinGuildReqResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJoinGuildReqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseJoinGuildReqResponse parses an HTTP response from a JoinGuildReqWithResponse call
func ParseJoinGuildReqResponse(rsp *http.Response) (*JoinGuildReqResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JoinGuildReqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChangeGuildLeaderResponse parses an HTTP response from a ChangeGuildLeaderWithResponse call
func ParseChangeGuildLeaderResponse(rsp *http.Response) (*ChangeGuildLeaderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeGuildLeaderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteGuildResponse parses an HTTP response from a DeleteGuildWithResponse call
func ParseDeleteGuildResponse(rsp *http.Response) (*DeleteGuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutGuildResponse parses an HTTP response from a PutGuildWithResponse call
func ParsePutGuildResponse(rsp *http.Response) (*PutGuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildJoinReqResponse parses an HTTP response from a GetGuildJoinReqWithResponse call
func ParseGetGuildJoinReqResponse(rsp *http.Response) (*GetGuildJoinReqResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildJoinReqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGuildJoinReqsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApproveJoinGuildReqResponse parses an HTTP response from a ApproveJoinGuildReqWithResponse call
func ParseApproveJoinGuildReqResponse(rsp *http.Response) (*ApproveJoinGuildReqResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApproveJoinGuildReqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseKickGuildMemberResponse parses an HTTP response from a KickGuildMemberWithResponse call
func ParseKickGuildMemberResponse(rsp *http.Response) (*KickGuildMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KickGuildMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostGuildUpgradeResponse parses an HTTP response from a PostGuildUpgradeWithResponse call
func ParsePostGuildUpgradeResponse(rsp *http.Response) (*PostGuildUpgradeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGuildUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGuildsResponse parses an HTTP response from a GetGuildsWithResponse call
func ParseGetGuildsResponse(rsp *http.Response) (*GetGuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetGuildsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateGuildResponse parses an HTTP response from a CreateGuildWithResponse call
func ParseCreateGuildResponse(rsp *http.Response) (*CreateGuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMessageRoomsResponse parses an HTTP response from a GetMessageRoomsWithResponse call
func ParseGetMessageRoomsResponse(rsp *http.Response) (*GetMessageRoomsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageRoomsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMessageRoomsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateMessageRoomResponse parses an HTTP response from a CreateMessageRoomWithResponse call
func ParseCreateMessageRoomResponse(rsp *http.Response) (*CreateMessageRoomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMessageRoomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteMessageRoomResponse parses an HTTP response from a DeleteMessageRoomWithResponse call
func ParseDeleteMessageRoomResponse(rsp *http.Response) (*DeleteMessageRoomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessageRoomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMessageRoomResponse parses an HTTP response from a GetMessageRoomWithResponse call
func ParseGetMessageRoomResponse(rsp *http.Response) (*GetMessageRoomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageRoomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMessageRoomRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteMessageRoomChatResponse parses an HTTP response from a DeleteMessageRoomChatWithResponse call
func ParseDeleteMessageRoomChatResponse(rsp *http.Response) (*DeleteMessageRoomChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessageRoomChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutMessageRoomChatResponse parses an HTTP response from a PutMessageRoomChatWithResponse call
func ParsePutMessageRoomChatResponse(rsp *http.Response) (*PutMessageRoomChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMessageRoomChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMessageRoomChatResponse parses an HTTP response from a GetMessageRoomChatWithResponse call
func ParseGetMessageRoomChatResponse(rsp *http.Response) (*GetMessageRoomChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageRoomChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMessageRoomChatsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostMessageRoomChatResponse parses an HTTP response from a PostMessageRoomChatWithResponse call
func ParsePostMessageRoomChatResponse(rsp *http.Response) (*PostMessageRoomChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMessageRoomChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserCharacterDetailsResponse parses an HTTP response from a GetUserCharacterDetailsWithResponse call
func ParseGetUserCharacterDetailsResponse(rsp *http.Response) (*GetUserCharacterDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCharacterDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUserCharacterDetailsRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostEvolveCharacterResponse parses an HTTP response from a PostEvolveCharacterWithResponse call
func ParsePostEvolveCharacterResponse(rsp *http.Response) (*PostEvolveCharacterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEvolveCharacterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostCharacterExperienceResponse parses an HTTP response from a PostCharacterExperienceWithResponse call
func ParsePostCharacterExperienceResponse(rsp *http.Response) (*PostCharacterExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCharacterExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserCharacterSummeryListResponse parses an HTTP response from a GetUserCharacterSummeryListWithResponse call
func ParseGetUserCharacterSummeryListResponse(rsp *http.Response) (*GetUserCharacterSummeryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCharacterSummeryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUserCharacterSummeryListRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserHomeResponse parses an HTTP response from a GetUserHomeWithResponse call
func ParseGetUserHomeResponse(rsp *http.Response) (*GetUserHomeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserHomeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserHome
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUserHomeUpgradeResponse parses an HTTP response from a PostUserHomeUpgradeWithResponse call
func ParsePostUserHomeUpgradeResponse(rsp *http.Response) (*PostUserHomeUpgradeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserHomeUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserFacilitiesResponse parses an HTTP response from a GetUserFacilitiesWithResponse call
func ParseGetUserFacilitiesResponse(rsp *http.Response) (*GetUserFacilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserFacilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFacilitiesRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUserHomeFacilityUpgradeResponse parses an HTTP response from a PostUserHomeFacilityUpgradeWithResponse call
func ParsePostUserHomeFacilityUpgradeResponse(rsp *http.Response) (*PostUserHomeFacilityUpgradeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserHomeFacilityUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/characters)
	GetCharacterSummeryList(c *gin.Context, params GetCharacterSummeryListParams)

	// (GET /v1/characters/{id})
	GetCharacterDetails(c *gin.Context, id ParamId)

	// (GET /v1/characters/{id}/evolve/tree)
	GetCharacterEvolveTree(c *gin.Context, id ParamId)

	// (GET /v1/events)
	GetEventSummeryList(c *gin.Context, params GetEventSummeryListParams)

	// (GET /v1/events/{id})
	GetEventDetails(c *gin.Context, id ParamId)

	// (GET /v1/friend/requests)
	GetFriendshipRequests(c *gin.Context, params GetFriendshipRequestsParams)

	// (POST /v1/friend/requests)
	PostFriendRequest(c *gin.Context)

	// (GET /v1/friend/requests/{id})
	GetFriendshipRequestDetails(c *gin.Context, id ParamId)

	// (PUT /v1/friend/requests/{id})
	PutFriendshipRequest(c *gin.Context, id ParamId)

	// (DELETE /v1/friend/{id})
	DeleteFriend(c *gin.Context, id ParamId)

	// (GET /v1/friend/{id})
	GetFriend(c *gin.Context, id ParamId)

	// (GET /v1/friends)
	GetFriends(c *gin.Context, params GetFriendsParams)

	// (DELETE /v1/guild/battle/event/{event_id}/leader)
	DeleteGuildBattleEventEntry(c *gin.Context, eventId EventId)

	// (GET /v1/guild/battle/event/{event_id}/leader)
	GetGuildBattleEvents(c *gin.Context, eventId EventId)

	// (POST /v1/guild/battle/event/{event_id}/leader)
	PostGuildBattleEventEntry(c *gin.Context, eventId EventId)

	// (GET /v1/guild/battle/event/{event_id}/mattings)
	GetGuildBattleEventMattings(c *gin.Context, eventId EventId)

	// (GET /v1/guild/battle/event/{event_id}/mattings/{id})
	GetGuildBattleEventMattingDetails(c *gin.Context, eventId EventId, id ParamId)

	// (POST /v1/guild/battle/event/{event_id}/register)
	PostGuildBattleCharacterRegister(c *gin.Context, eventId EventId)

	// (GET /v1/guild/battle/event/{event_id}/result)
	GetGuildBattleLogDetails(c *gin.Context, eventId EventId)

	// (GET /v1/guild/battle/events)
	GetGuildBattleResults(c *gin.Context, params GetGuildBattleResultsParams)

	// (GET /v1/guild/{guild_id})
	GetGuild(c *gin.Context, guildId GuildId)

	// (DELETE /v1/guild/{guild_id}/exit)
	ExitGuild(c *gin.Context, guildId GuildId)

	// (GET /v1/guild/{guild_id}/funds)
	GetGuildFund(c *gin.Context, guildId GuildId)

	// (POST /v1/guild/{guild_id}/funds)
	PostGuildFund(c *gin.Context, guildId GuildId)

	// (GET /v1/guild/{guild_id}/funds/logs)
	GetGuildFundLogs(c *gin.Context, guildId GuildId, params GetGuildFundLogsParams)

	// (GET /v1/guild/{guild_id}/funds/logs/{id})
	GetGuildFundLogDetails(c *gin.Context, guildId GuildId, id ParamId)

	// (DELETE /v1/guild/{guild_id}/join)
	DeleteJoinGuildReq(c *gin.Context, guildId GuildId)

	// (POST /v1/guild/{guild_id}/join)
	JoinGuildReq(c *gin.Context, guildId GuildId)

	// (PUT /v1/guild/{guild_id}/leader)
	ChangeGuildLeader(c *gin.Context, guildId GuildId)

	// (DELETE /v1/guild/{guild_id}/leader/info)
	DeleteGuild(c *gin.Context, guildId GuildId)

	// (PUT /v1/guild/{guild_id}/leader/info)
	PutGuild(c *gin.Context, guildId GuildId)

	// (GET /v1/guild/{guild_id}/leader/join)
	GetGuildJoinReq(c *gin.Context, guildId GuildId, params GetGuildJoinReqParams)

	// (PUT /v1/guild/{guild_id}/leader/join)
	ApproveJoinGuildReq(c *gin.Context, guildId GuildId)

	// (DELETE /v1/guild/{guild_id}/leader/members/{user_id})
	KickGuildMember(c *gin.Context, guildId GuildId, userId UserId)

	// (POST /v1/guild/{guild_id}/leader/upgrade)
	PostGuildUpgrade(c *gin.Context, guildId GuildId)

	// (GET /v1/guilds)
	GetGuilds(c *gin.Context, params GetGuildsParams)

	// (POST /v1/guilds)
	CreateGuild(c *gin.Context)

	// (POST /v1/login)
	Login(c *gin.Context)

	// (GET /v1/me)
	GetMe(c *gin.Context)

	// (POST /v1/me)
	CreateUser(c *gin.Context)

	// (GET /v1/message/room)
	GetMessageRooms(c *gin.Context, params GetMessageRoomsParams)

	// (POST /v1/message/room)
	CreateMessageRoom(c *gin.Context)

	// (DELETE /v1/message/room/{id})
	DeleteMessageRoom(c *gin.Context, id ParamId)

	// (GET /v1/message/room/{id})
	GetMessageRoom(c *gin.Context, id ParamId)

	// (DELETE /v1/message/room/{id}/chat/fix)
	DeleteMessageRoomChat(c *gin.Context, id ParamId)

	// (PUT /v1/message/room/{id}/chat/fix)
	PutMessageRoomChat(c *gin.Context, id ParamId)

	// (GET /v1/message/room/{id}/chats)
	GetMessageRoomChat(c *gin.Context, id ParamId)

	// (POST /v1/message/room/{id}/chats)
	PostMessageRoomChat(c *gin.Context, id ParamId)

	// (GET /v1/user/{user_id}/character/{id})
	GetUserCharacterDetails(c *gin.Context, userId UserId, id ParamId)

	// (POST /v1/user/{user_id}/character/{id}/evolve)
	PostEvolveCharacter(c *gin.Context, userId UserId, id ParamId)

	// (POST /v1/user/{user_id}/character/{id}/experience)
	PostCharacterExperience(c *gin.Context, userId UserId, id ParamId)

	// (GET /v1/user/{user_id}/characters)
	GetUserCharacterSummeryList(c *gin.Context, userId UserId, params GetUserCharacterSummeryListParams)

	// (GET /v1/user/{user_id}/home)
	GetUserHome(c *gin.Context, userId UserId)

	// (POST /v1/user/{user_id}/home)
	PostUserHomeUpgrade(c *gin.Context, userId UserId)

	// (GET /v1/user/{user_id}/home/facility)
	GetUserFacilities(c *gin.Context, userId UserId)

	// (POST /v1/user/{user_id}/home/facility/{id})
	PostUserHomeFacilityUpgrade(c *gin.Context, userId UserId, id ParamId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCharacterSummeryList operation middleware
func (siw *ServerInterfaceWrapper) GetCharacterSummeryList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCharacterSummeryListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCharacterSummeryList(c, params)
}

// GetCharacterDetails operation middleware
func (siw *ServerInterfaceWrapper) GetCharacterDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCharacterDetails(c, id)
}

// GetCharacterEvolveTree operation middleware
func (siw *ServerInterfaceWrapper) GetCharacterEvolveTree(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCharacterEvolveTree(c, id)
}

// GetEventSummeryList operation middleware
func (siw *ServerInterfaceWrapper) GetEventSummeryList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventSummeryListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "event_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "event_type", c.Request.URL.Query(), &params.EventType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEventSummeryList(c, params)
}

// GetEventDetails operation middleware
func (siw *ServerInterfaceWrapper) GetEventDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEventDetails(c, id)
}

// GetFriendshipRequests operation middleware
func (siw *ServerInterfaceWrapper) GetFriendshipRequests(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFriendshipRequestsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFriendshipRequests(c, params)
}

// PostFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) PostFriendRequest(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostFriendRequest(c)
}

// GetFriendshipRequestDetails operation middleware
func (siw *ServerInterfaceWrapper) GetFriendshipRequestDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFriendshipRequestDetails(c, id)
}

// PutFriendshipRequest operation middleware
func (siw *ServerInterfaceWrapper) PutFriendshipRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutFriendshipRequest(c, id)
}

// DeleteFriend operation middleware
func (siw *ServerInterfaceWrapper) DeleteFriend(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFriend(c, id)
}

// GetFriend operation middleware
func (siw *ServerInterfaceWrapper) GetFriend(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFriend(c, id)
}

// GetFriends operation middleware
func (siw *ServerInterfaceWrapper) GetFriends(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFriendsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFriends(c, params)
}

// DeleteGuildBattleEventEntry operation middleware
func (siw *ServerInterfaceWrapper) DeleteGuildBattleEventEntry(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId EventId

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGuildBattleEventEntry(c, eventId)
}

// GetGuildBattleEvents operation middleware
func (siw *ServerInterfaceWrapper) GetGuildBattleEvents(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId EventId

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuildBattleEvents(c, eventId)
}

// PostGuildBattleEventEntry operation middleware
func (siw *ServerInterfaceWrapper) PostGuildBattleEventEntry(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId EventId

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGuildBattleEventEntry(c, eventId)
}

// GetGuildBattleEventMattings operation middleware
func (siw *ServerInterfaceWrapper) GetGuildBattleEventMattings(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId EventId

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuildBattleEventMattings(c, eventId)
}

// GetGuildBattleEventMattingDetails operation middleware
func (siw *ServerInterfaceWrapper) GetGuildBattleEventMattingDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId EventId

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuildBattleEventMattingDetails(c, eventId, id)
}

// PostGuildBattleCharacterRegister operation middleware
func (siw *ServerInterfaceWrapper) PostGuildBattleCharacterRegister(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId EventId

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGuildBattleCharacterRegister(c, eventId)
}

// GetGuildBattleLogDetails operation middleware
func (siw *ServerInterfaceWrapper) GetGuildBattleLogDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId EventId

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuildBattleLogDetails(c, eventId)
}

// GetGuildBattleResults operation middleware
func (siw *ServerInterfaceWrapper) GetGuildBattleResults(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGuildBattleResultsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuildBattleResults(c, params)
}

// GetGuild operation middleware
func (siw *ServerInterfaceWrapper) GetGuild(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuild(c, guildId)
}

// ExitGuild operation middleware
func (siw *ServerInterfaceWrapper) ExitGuild(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExitGuild(c, guildId)
}

// GetGuildFund operation middleware
func (siw *ServerInterfaceWrapper) GetGuildFund(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuildFund(c, guildId)
}

// PostGuildFund operation middleware
func (siw *ServerInterfaceWrapper) PostGuildFund(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGuildFund(c, guildId)
}

// GetGuildFundLogs operation middleware
func (siw *ServerInterfaceWrapper) GetGuildFundLogs(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGuildFundLogsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuildFundLogs(c, guildId, params)
}

// GetGuildFundLogDetails operation middleware
func (siw *ServerInterfaceWrapper) GetGuildFundLogDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuildFundLogDetails(c, guildId, id)
}

// DeleteJoinGuildReq operation middleware
func (siw *ServerInterfaceWrapper) DeleteJoinGuildReq(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteJoinGuildReq(c, guildId)
}

// JoinGuildReq operation middleware
func (siw *ServerInterfaceWrapper) JoinGuildReq(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.JoinGuildReq(c, guildId)
}

// ChangeGuildLeader operation middleware
func (siw *ServerInterfaceWrapper) ChangeGuildLeader(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeGuildLeader(c, guildId)
}

// DeleteGuild operation middleware
func (siw *ServerInterfaceWrapper) DeleteGuild(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGuild(c, guildId)
}

// PutGuild operation middleware
func (siw *ServerInterfaceWrapper) PutGuild(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutGuild(c, guildId)
}

// GetGuildJoinReq operation middleware
func (siw *ServerInterfaceWrapper) GetGuildJoinReq(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGuildJoinReqParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuildJoinReq(c, guildId, params)
}

// ApproveJoinGuildReq operation middleware
func (siw *ServerInterfaceWrapper) ApproveJoinGuildReq(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ApproveJoinGuildReq(c, guildId)
}

// KickGuildMember operation middleware
func (siw *ServerInterfaceWrapper) KickGuildMember(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.KickGuildMember(c, guildId, userId)
}

// PostGuildUpgrade operation middleware
func (siw *ServerInterfaceWrapper) PostGuildUpgrade(c *gin.Context) {

	var err error

	// ------------- Path parameter "guild_id" -------------
	var guildId GuildId

	err = runtime.BindStyledParameterWithOptions("simple", "guild_id", c.Param("guild_id"), &guildId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter guild_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGuildUpgrade(c, guildId)
}

// GetGuilds operation middleware
func (siw *ServerInterfaceWrapper) GetGuilds(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGuildsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGuilds(c, params)
}

// CreateGuild operation middleware
func (siw *ServerInterfaceWrapper) CreateGuild(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateGuild(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMe(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GetMessageRooms operation middleware
func (siw *ServerInterfaceWrapper) GetMessageRooms(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMessageRoomsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMessageRooms(c, params)
}

// CreateMessageRoom operation middleware
func (siw *ServerInterfaceWrapper) CreateMessageRoom(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateMessageRoom(c)
}

// DeleteMessageRoom operation middleware
func (siw *ServerInterfaceWrapper) DeleteMessageRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMessageRoom(c, id)
}

// GetMessageRoom operation middleware
func (siw *ServerInterfaceWrapper) GetMessageRoom(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMessageRoom(c, id)
}

// DeleteMessageRoomChat operation middleware
func (siw *ServerInterfaceWrapper) DeleteMessageRoomChat(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMessageRoomChat(c, id)
}

// PutMessageRoomChat operation middleware
func (siw *ServerInterfaceWrapper) PutMessageRoomChat(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutMessageRoomChat(c, id)
}

// GetMessageRoomChat operation middleware
func (siw *ServerInterfaceWrapper) GetMessageRoomChat(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMessageRoomChat(c, id)
}

// PostMessageRoomChat operation middleware
func (siw *ServerInterfaceWrapper) PostMessageRoomChat(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMessageRoomChat(c, id)
}

// GetUserCharacterDetails operation middleware
func (siw *ServerInterfaceWrapper) GetUserCharacterDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserCharacterDetails(c, userId, id)
}

// PostEvolveCharacter operation middleware
func (siw *ServerInterfaceWrapper) PostEvolveCharacter(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEvolveCharacter(c, userId, id)
}

// PostCharacterExperience operation middleware
func (siw *ServerInterfaceWrapper) PostCharacterExperience(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCharacterExperience(c, userId, id)
}

// GetUserCharacterSummeryList operation middleware
func (siw *ServerInterfaceWrapper) GetUserCharacterSummeryList(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserCharacterSummeryListParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserCharacterSummeryList(c, userId, params)
}

// GetUserHome operation middleware
func (siw *ServerInterfaceWrapper) GetUserHome(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserHome(c, userId)
}

// PostUserHomeUpgrade operation middleware
func (siw *ServerInterfaceWrapper) PostUserHomeUpgrade(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserHomeUpgrade(c, userId)
}

// GetUserFacilities operation middleware
func (siw *ServerInterfaceWrapper) GetUserFacilities(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserFacilities(c, userId)
}

// PostUserHomeFacilityUpgrade operation middleware
func (siw *ServerInterfaceWrapper) PostUserHomeFacilityUpgrade(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id ParamId

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserHomeFacilityUpgrade(c, userId, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/characters", wrapper.GetCharacterSummeryList)
	router.GET(options.BaseURL+"/v1/characters/:id", wrapper.GetCharacterDetails)
	router.GET(options.BaseURL+"/v1/characters/:id/evolve/tree", wrapper.GetCharacterEvolveTree)
	router.GET(options.BaseURL+"/v1/events", wrapper.GetEventSummeryList)
	router.GET(options.BaseURL+"/v1/events/:id", wrapper.GetEventDetails)
	router.GET(options.BaseURL+"/v1/friend/requests", wrapper.GetFriendshipRequests)
	router.POST(options.BaseURL+"/v1/friend/requests", wrapper.PostFriendRequest)
	router.GET(options.BaseURL+"/v1/friend/requests/:id", wrapper.GetFriendshipRequestDetails)
	router.PUT(options.BaseURL+"/v1/friend/requests/:id", wrapper.PutFriendshipRequest)
	router.DELETE(options.BaseURL+"/v1/friend/:id", wrapper.DeleteFriend)
	router.GET(options.BaseURL+"/v1/friend/:id", wrapper.GetFriend)
	router.GET(options.BaseURL+"/v1/friends", wrapper.GetFriends)
	router.DELETE(options.BaseURL+"/v1/guild/battle/event/:event_id/leader", wrapper.DeleteGuildBattleEventEntry)
	router.GET(options.BaseURL+"/v1/guild/battle/event/:event_id/leader", wrapper.GetGuildBattleEvents)
	router.POST(options.BaseURL+"/v1/guild/battle/event/:event_id/leader", wrapper.PostGuildBattleEventEntry)
	router.GET(options.BaseURL+"/v1/guild/battle/event/:event_id/mattings", wrapper.GetGuildBattleEventMattings)
	router.GET(options.BaseURL+"/v1/guild/battle/event/:event_id/mattings/:id", wrapper.GetGuildBattleEventMattingDetails)
	router.POST(options.BaseURL+"/v1/guild/battle/event/:event_id/register", wrapper.PostGuildBattleCharacterRegister)
	router.GET(options.BaseURL+"/v1/guild/battle/event/:event_id/result", wrapper.GetGuildBattleLogDetails)
	router.GET(options.BaseURL+"/v1/guild/battle/events", wrapper.GetGuildBattleResults)
	router.GET(options.BaseURL+"/v1/guild/:guild_id", wrapper.GetGuild)
	router.DELETE(options.BaseURL+"/v1/guild/:guild_id/exit", wrapper.ExitGuild)
	router.GET(options.BaseURL+"/v1/guild/:guild_id/funds", wrapper.GetGuildFund)
	router.POST(options.BaseURL+"/v1/guild/:guild_id/funds", wrapper.PostGuildFund)
	router.GET(options.BaseURL+"/v1/guild/:guild_id/funds/logs", wrapper.GetGuildFundLogs)
	router.GET(options.BaseURL+"/v1/guild/:guild_id/funds/logs/:id", wrapper.GetGuildFundLogDetails)
	router.DELETE(options.BaseURL+"/v1/guild/:guild_id/join", wrapper.DeleteJoinGuildReq)
	router.POST(options.BaseURL+"/v1/guild/:guild_id/join", wrapper.JoinGuildReq)
	router.PUT(options.BaseURL+"/v1/guild/:guild_id/leader", wrapper.ChangeGuildLeader)
	router.DELETE(options.BaseURL+"/v1/guild/:guild_id/leader/info", wrapper.DeleteGuild)
	router.PUT(options.BaseURL+"/v1/guild/:guild_id/leader/info", wrapper.PutGuild)
	router.GET(options.BaseURL+"/v1/guild/:guild_id/leader/join", wrapper.GetGuildJoinReq)
	router.PUT(options.BaseURL+"/v1/guild/:guild_id/leader/join", wrapper.ApproveJoinGuildReq)
	router.DELETE(options.BaseURL+"/v1/guild/:guild_id/leader/members/:user_id", wrapper.KickGuildMember)
	router.POST(options.BaseURL+"/v1/guild/:guild_id/leader/upgrade", wrapper.PostGuildUpgrade)
	router.GET(options.BaseURL+"/v1/guilds", wrapper.GetGuilds)
	router.POST(options.BaseURL+"/v1/guilds", wrapper.CreateGuild)
	router.POST(options.BaseURL+"/v1/login", wrapper.Login)
	router.GET(options.BaseURL+"/v1/me", wrapper.GetMe)
	router.POST(options.BaseURL+"/v1/me", wrapper.CreateUser)
	router.GET(options.BaseURL+"/v1/message/room", wrapper.GetMessageRooms)
	router.POST(options.BaseURL+"/v1/message/room", wrapper.CreateMessageRoom)
	router.DELETE(options.BaseURL+"/v1/message/room/:id", wrapper.DeleteMessageRoom)
	router.GET(options.BaseURL+"/v1/message/room/:id", wrapper.GetMessageRoom)
	router.DELETE(options.BaseURL+"/v1/message/room/:id/chat/fix", wrapper.DeleteMessageRoomChat)
	router.PUT(options.BaseURL+"/v1/message/room/:id/chat/fix", wrapper.PutMessageRoomChat)
	router.GET(options.BaseURL+"/v1/message/room/:id/chats", wrapper.GetMessageRoomChat)
	router.POST(options.BaseURL+"/v1/message/room/:id/chats", wrapper.PostMessageRoomChat)
	router.GET(options.BaseURL+"/v1/user/:user_id/character/:id", wrapper.GetUserCharacterDetails)
	router.POST(options.BaseURL+"/v1/user/:user_id/character/:id/evolve", wrapper.PostEvolveCharacter)
	router.POST(options.BaseURL+"/v1/user/:user_id/character/:id/experience", wrapper.PostCharacterExperience)
	router.GET(options.BaseURL+"/v1/user/:user_id/characters", wrapper.GetUserCharacterSummeryList)
	router.GET(options.BaseURL+"/v1/user/:user_id/home", wrapper.GetUserHome)
	router.POST(options.BaseURL+"/v1/user/:user_id/home", wrapper.PostUserHomeUpgrade)
	router.GET(options.BaseURL+"/v1/user/:user_id/home/facility", wrapper.GetUserFacilities)
	router.POST(options.BaseURL+"/v1/user/:user_id/home/facility/:id", wrapper.PostUserHomeFacilityUpgrade)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde1Pcxpb/KrPa/cOu1WUGMLbhn1u+iZNL1t51+bF7txIXJWYaUO6MNJE0BIqiCmkg",
	"vAN+4YtNEjvGNgZ7sC9O4ge2v0sazeOv/Qpb6tZbrcc8wAyZ1C0XdySdPn3O6V+fPn369BiV5DNZngOc",
	"JFI9Y9QQYFJAQH+O/EkEwjAQ/iSxGaD9kAJiUmCzEstzVA8FlV9gfhfml7V/5UJxVams3IDK9dgVjh2J",
	"ad+IEpPJxo79PvFWffUKyltXLn9yPAblx+UPN9XFl1C+BZUFqMxTNCUmh0CG0doAI0wmmwZUT3tXV6Kj",
	"vau7u4OmpNEsoHoolpPAIBCo8fFxmsoyApMBks4rGAac1MemnCQ6Eonuru7uROJkZ0d7ZwdNsRrjWUYa",
	"omiKY7ReWV/SlAC+ybECSFE9kpADdq50BkRJYLlBSmsef4Z/d0um/GSn9PI5lLdjGT4F0mIcvdw2ymTS",
	"MShvQVmBynxbW9sxKG9D+c5xSmfsmxwQRt2coSYIvFjCoKnBHJtOuXvfnUicau/u7ug6cepEorub2Hnz",
	"w+o6n2UGUbdJXKNnZI3SJN6RHnXeCRyG8GYSP3E60Xm6s/tkoqOr43RXRzdNYhsIfYGsG8/J7CeI/OdE",
	"ILhFfzKROHGqu7sr0dl+MnHyJFH0xnfVSH4cvwxE6S98igXI8s9mstLoX/jUqPZ/kjwnAU6iesbGaZdR",
	"lp68gXIB5jehsg2VDai8hvkZmF+D+WmoPID5XQqTF7M8J2LSn4IBJpeWzgoCLzipU0w2m2aTjEY7/rWo",
	"NTBm4/vfBDBA9VD/GrewJY6finFE7SIQcXecPO69n1fXVzTu8k8QqjyG8iriS/9aI34mmxX4YdKw23ih",
	"Lm1DeRUq8+q9l+ryDJyQofweyj/BCfnfiyuv1eVrmgwURftX3tLEDZXr6k9vimtPobyBP4XyQuzMhV4o",
	"F9TvptTCayhvaaSUJSjfhfKj8uaH4q2X+NXY3vv5/9u9E4P5WzD/FOZ3YH62dHOnvDUPlevF2Q/lzUU4",
	"IauLL/dezX/FxWJagz2OtxEcbEIFPR5g0qLP81ntX3nyK85oUSnA/BbMz6pLijp3Dzdqa8J4rDE/9RDj",
	"rL0J73OdPmUaeT/PpwHDUeM09ckQIzBJCQhnh/k0Fn1W4LNAkHQjTBovhGnfpHSeESUgXMplMtoQRICq",
	"ke7jcpl+TMap3MrEP9WFlcq979Q3S1AulG5tqku/xdgUHdP+w1/RMW1sxb6iEiMMw3xF4WexBB2D+Zsw",
	"L8P8Q5jfRc/7+/vN5+34ubKlv6I8Qq8kk0nzlQ7tlSdQWbdeSSAb+gDlx5g1dWoGygulyftQnoTyDc2c",
	"NDvToD5WXp8u3nquTZK6Db6CcgF/BuVtdfpN8YeHUJkvrryG8gL6fhLK81CW7fqwg44FGV/aZO8W4lXz",
	"W77/a5CUHKp0KsCjUYxoQarsTWn0MJq5tVXaKBRvL6nLixQJh+3cIwREREjc6gh0KZdMAlEk2B2fAg7k",
	"7UgQUJqmMkAUdeB3MirqlD1s2hwM71dDPJokgnuGeLOathMkddXERf9OcrkM1fNlVyJxtao+9nISEDgm",
	"HbuE3LkYxvMq2SeyrDkonwKJYdMEtjUm+vrTfPLvBAFKmTSUC+gpVK6X72+U1t9gTNWs2NAm9VUukehM",
	"SqyUBuhPYEMuzfGcgfmtysq8qjzFb8Ztr5J06vTaAqcp7c3Lo1lwVpP6OF3ngEDQsYowfQYPC6uTcGJa",
	"+5/tDR9z1Hi3O7rhzIgslwzv6ghI5iRwBulUGspl+jmGTTuGlfFXW5YbJDGX4yT8RcR2fEHAYNkgSTu9",
	"YIs72m5fvsbpC29NbAjV6/RgtOOrBFN4Foa10+3tdHsH3d5Jt5+g27vojgTdmaBPkJHNYs0jziv/2fu3",
	"2OXe82ePfXHp8nG7NNtPdXad7DqFJoQBXsgwEiZ68gRFauMzJsmmWWn0sm4SOqMJup3uoDvpE0TGPhNY",
	"wKUI1oUZ7mOkqvQU1bK0pUPYm1dE3VXw6AQzLQ6x2Yt4LeGL4DV2w/gsOptRu04yTL01oU+3UBvTJIv8",
	"HEimC6R3nDjpshLI1OrMutnUSIXxgj3rywIAvuw4/4jEmO6vW2bACAJD5lAMZdHRy3OsKDWSU896wMkw",
	"jjmEmtMFhuQhY04MEj7dtDszxI4hqIs0WxgDys0HphDUfmOF65gCP4JIdUxlgdiAzmhI8Vc+Awyg/igd",
	"QtBZM17o00U1+KCDdQPkZzS+D1IL5t0z0RA7o8e1ovWCMHm5OTPo+fD2eY5Np+rFfzuRqrSKPvwsx6XO",
	"8YNBTKDwbCQudGIeLjCFCGw0wsScnBz88DTbb0BfLgKRzwnJOudOxNEXPMtdBN+QJVyNTMzob5Uq0RkI",
	"7YpJPYqcG2Yw5gA6eIM5j4MbF3k+88kQIzWiS8khRvrIXakZz2w0qoIz23eNEKGDjYOXpOZoNGyJQCJW",
	"lWwdBBrrHpJ5O2iBaxDwF0aS0uAsJwmjJkMaYPl3kLS3VVxVoLytTm1A+ZG6vgLlVRQ+jySL3lQ9QG/r",
	"g+Zyn2ckieUGfYNPeNeViYSONvcdf9Zf3Wckf6CPoSxqVXSoYZDvL6vGKYEcSjesq+bBUcMqkKZYsQ9o",
	"xk0KB27gSB/Mb8L8bmnu1+KOTNiDc4vBIGgwRNu7FlE8ubRUn+uLyWFKVYCaixNd9ZhMg00ME/1oS2CP",
	"kBoRVKCpNC+CvuhrA1v3v2W5Wj509dyi4uCFDgpw+OnEJzIvWo+riXBY3ESl4Cuh2gj4ScqkRuSRdvXa",
	"V4K+odqkAJjqI7X6HIDU0vcty5Hwyb3dps7/oM48Kd567gi2E3ddMfk0yiiLHAhO8kQ2fobKOlR2YH6n",
	"vPFMLdxxbJyE7E5FjauznCTwqVwSN+oritLL13tvnfuU6swP6od8eWKqdHPDfI/IitiXFdhhRiJsDalT",
	"Tysr8+bn3n6i5A1SfkYaDIN0AMfnhsOVlQGZfn1ejOw9khDVb9vLyFdx7XmVflku3f2psvG9+mBLvfuA",
	"JDMOgFQf45f1o87dU6ceQnkL5u+jqVTPR8TZQOrMr1C5ri6tuHaWfUQZsPPlMA5D5Lq9ukzdEqZD4YTx",
	"5uocbRvHvhhgBFgatV0zkONSfWl+0NwNNffo/De+oo6oDM+B0WpCLQJIAjZL2OhTZ56Ubm6U7hZKdyah",
	"ch2nkDosaUwzW3V5cRwq18ccnTrWTseKN7fV6TfHx8s7u+rUw9iYeu9FZeop+fVOOoYfHx9Xl25D+Rqy",
	"nzl7Mo5t61s09p68Rp9/pNmi8ivM77rtXn3xonTzeUxd36zkv4+WJWO1ZAjWrTxLfuH7YJop9XID/JVs",
	"ipEAebWlY3F0oHUBaA0AaUiyCoRwyYo8XlFffAVhRMhqToOqb0vW4UP4qiHClFjz1Ndo1A4CUj9N9KYI",
	"w355svjkp3L+HZQfYwgw08avXOn91M5UaAYwTfVyw6wEND2IwaO191MjV/Y1zsIwW/my+2Ti1MlT3R2J",
	"rkTXqUTXadr5w8nEVdqlPz3T1zm1enjzLHs98rHHxTxGMsQMg74cJwCGIMXi2mZ58xmaIPNQeYu6+QrK",
	"heLabGnyfjE/pd57QUz8/JjeWJoRpT49/SxV7aS2v95MJb+hvpgPGRRucWsDaRfm71U/WOz+hEcqtEP1",
	"V4PtprFgrw0mlOURHl6zDbwoII/SbB9o4kNrDiy4Y+rdB5VbvxXn1qC8eDzyPIAl6OCWJKULRiTAnXyZ",
	"4yQSWEwjtX6oTC85fWuic50lJmbC/B1sG+7VFJGE7fCCDxmUqb4F5fcYIIs/3omwTHNJTT//YDsKgSVA",
	"FBkvuhNYiKalZyVLjDAIpD4zUNVXU9JPADFfHpFTrVkfkb2GO2+avkXxW14gQDGaDMzHdqLuJ5Gs23zf",
	"r++uLS7fqDpJANYYxCchHOz+FaTTfOx/eCGd+pdwSPMLBl7IedMEvAwOmK/Y14FBhmMcEiFOpBdyjo1Z",
	"24ESZ7Nf8yxXS4P2njto+Eggio7QvmJjdVRP1h1ih9QdczHn6UE/k2b0zFWXd1KYr2z9w4Wi2n8kGBR0",
	"+j5H76A8V5m+BuVCaaOgzjwMQVVXzwwO3a2Q+nkZ4Y+GKb2pgJVDkItpZ87jVRIGlIeHKyJpxqopMFz9",
	"7O86bBjGf9DisDy9qf72AofVtOW9vAmVSSivk9pF/g+TlNhhVhrtI40JdPz0MpsBsWNfi9LxWHFtovSL",
	"UryxuPdurbiqqDNvj8H8M6g8R4nWO8XbD0vPZjWL+flNeXOxdHNDcy0iZAx7nZjQaUGUBJ4bBKJt3qp1",
	"H+pbJp0GEmEZU5ydKC7IlelrpWezeGShE7jl6c3ymy3N50fevrq0or6/vff2Idoo1bdOS0/eVKYW1Znb",
	"ZoDleNT908jpMj7RNLdWTb/N6CdZeFd9RoVHYt5RAqT9Ss/2jcY+Q1j9BB3A/ICjlOig3yrMbx0r/bJQ",
	"2bihTqwfJ1pbBuXH1p5Oqx8fiRqn8M1l1sBf58VJlDZEagjATzd/5TOE2WHAzBWtOiP0HDPK54I2+fwU",
	"YkNjmL+LFxl2ndShCIM3rAcyXODjHsUfrrW1tf05qsNnxJ1NHdgEFyRxM23WT/KjkU7DOI5JVLuYR8HJ",
	"4eoX874D6jlS1S7Mz+Jpozi5pF7bQceGC4agQuZ8ZNAe7iw5O6UTJGGnGfqL2ac3xZV35Y1noeZXl7ay",
	"vMga02/Qd/8NkhIvdJjhbbPRmhxGs1UCNXeHaLecgiR+3hyKTlHXZC/BYheTTBpEFptLAPjjMFwMjf/u",
	"o29WtS9DckeN7ns6MOLVxd/Kb1/hw9BEcRMyZf436AuXwEcojQRJ0MYyqrYof50hSZ/zua5AYXHt6d67",
	"G3WstVOOU8cenr1iGUfe+QCPxg6bBJwIrLgIdU7/haZyQhqd3ZWyPfG4YYNJPUuTlRCr//UthxmNXRoV",
	"JZCJnbnQS9HUMBBE3NtEW6KtXfuCzwKOybJUD9XZlmhLIHdCGkL6iA+3x52pWoNAiuRR5X+Eymv8N3Z0",
	"915NlB89xu4uhRoVUNWK3hTV4zjdZMutpJzVZb4kK9l6JY4iZeN0+HtGVG38qqvURkci0bAKG6FntgiV",
	"N1L4oH3sknkePqgQEKl1/f2482W9KUTc70tTEHFHwRGEMcygpgCragF1VfvZaR/xMTY1XqOR4FI9+ppo",
	"8R97725EMBVjUVG9meilbg5M/bb05aOo9DgOBsclAYBqDMAsvpGfxHmXOEckTO/WGc0mUL3zQOmR0D5K",
	"kguaDqyD89HA333m8gCAP/xd25H6/TYW0pnT5rOUszjr1GklYZOCZSqOKSDYVA498LsPMTe9MvHOT9x+",
	"7o2sUHvNLGeNM3+denaexOb3/IIO3TafNeiHlq/i2EV1eofK9b13a8WZZY/qL/CieZQb7zja6+qNNkwd",
	"7j2i8XFPib1Gat9VLKuJtU0e/CGQHoAAIY6976HyQ4vzR3eU56oe5MXZD+Wt96jY3m0oL0F5G07IhtO/",
	"g8IqW7GYuf9Vvr8A5Qe4JqTx4wJO89V+DGhK3lK336NGHqnrs8W7L9Wl7XL+HUoLdgEMKauhTmNqPDwR",
	"uWxhVE0YZUBTCqSBBIJNuPz4QWV13WM0n6JPdfqHE3mOjvbo8EkkWlDoUOvLUbLmqIy1aIuAsKW/jnxH",
	"xuE/GhpGuUtxfEAKL+TjY0bFy/G4dZLQF2Y9xxVdB6wx9sZ+n3gb88YFS6tvKwv/hIqizs4Zb5V3pivT",
	"1yr3lqE8D5U5qCiYBGHWxwDuPt58Vj+nXZ2ZmWU+W3geZD9I2DEs7QBU91hFDKs6LOjj1qV4SPVIqn1w",
	"BJTps+QPG+PE9f6+DMvG++RWHl3LD6/GWCLNHxm9jElAWNhtWjg4HB0hjEopTQIU9sIuzWoDqCMxvSfV",
	"mkLYNkGD7KHWgJJlFfRhWVL41pH5Q9mPAAZZM/ks6jQlbxH2opXruttpVL8PnLts5bF0Bg7dFBZY0as1",
	"rTV+WhPM2kKNBzGrQGnzuL5Njkfhyvd3YCry9+r3b9EdR170KZR+WS7+uBZJ73o1rmYPj4SWGjtaRjJm",
	"3OcWwaWJFt78XK/sVZ0VmNfK7Xfwy13GuUnV6a/HOBhhpWgRL3keXRNWKE++qExMeJR5doQ91No8GlN3",
	"gCYHcoGxa7PUyndTmhJR2DFkXH6W4w772DSqcTcrziIRR4lFoSvdsNaKc7fKO9P+nnwj1NaKPB0Owwgc",
	"7PE0HynYZA3374s3t/Hh5AhD/xxfQ5zJsiO6+fa6PBcWHHnriRqfIplQpGWe8xaKfTanA9rz9rle44ga",
	"y9e8Ubg1xEPEV8V6spoKeLfTZzvzC57lEBsXwTctz3F/PcdQL4OoQY/iGqkyh59B7p7tPuq4dRl1y4Wo",
	"Y6lgJTqQ8yGt4A46vJSfwIeacFZi7PeJt64H6J7iBbXwU/n+QnHjSWV1GSrXiwsylEl5DJ8MMdwgzmM4",
	"ZxS0PWTOKjpl3nJT67exuHHuN0J8oWClxdRlX7Y8mdaMsu8zSi48CFi8+7K4ojuKdWvXKK52+ECDUPK4",
	"BSINARHDBQ1bpLzSQATVay/d3ClvzduTNOs2PNd1a3/AlbH9ormji1l+y5ji7Ify5qL37Efp2WzdtqVX",
	"d9w3z7pR5zlIZS1bGNcQjNNLMMfH9HLe4xHzkB2XUiDTzENlu26L/A82+XfE+XnE176ind7jls/VCDvK",
	"ZQcFJgWiJA5p9vIzKu562167qn4XzdiJuKLz0goSNIk9RdhNCDv4gi9vbf5zL9YltEc44OdzgB0XNDeW",
	"Wa210mEcr2l+EC+K/AoX2IuPWuWIPbo+h+jsk8foKY7fUnKwks/kpCFLxxn/qlOuestmgSmfNF90izK1",
	"j5LXLx9qNnmfDz4J9DNUtqDyCJ/+CQTLK7hGcWsUHRqtmmMIlaaMC/q1Rj4ne8l36YQ5O/abyZvf5XHf",
	"s96MisdlSYMK+vhoOmhw22/G2p8xTrxDqTXMo2qbMNYjlMwgW4KZ6FqZmNjbveOzveQ0iVYxjX0ezFWh",
	"drTU88OvQSeTzY7IfmM0nhxipPgAOxI8WG0XEQXlE7nuOmqNzQOYaHORbo6CcqH020bl7nekLd0Gq21f",
	"Nj8I12i1ZuiGjH6xasccn2JwXOMYVGK5OVDBy+gfzg2H8iuXUotzt0obH4h7DIcfNMgXJLZQo0rUyIlA",
	"sDZGrSrtYRU7bSFQfW/UcTa+muL8xFu/qjU4c6PzECWzkzp2ZCq6BxqOXt0/aKfUt7I/EY9wSXyLjYMz",
	"j30KOnrv3m1BV6NtcCQLBBboF5dWYYfmfX7q3L1S4TbRIC0FWq18JKNsbdsfvIWJtU+NYZXrHLNGPTdc",
	"VGVehyxe7ieEozp9DvEBG5Iuk1ILvx4r3vpNXXv+5+ORtyjN6ztrtqKr+7zFibhrPt1qrMcQ70FLMp/r",
	"Skk5Yj5ZX4aIak38cuqxNYHsty34j/P4gO1C130d8J9ZF8weymH/OZAsFpsT2qtUubmsjgAUcsG6WLYG",
	"oDBukK0bMFre6eGztHGawk1gVTqu90zzSSY9xItSz+nE6fY4UopOxGtv7is5rDs2bKZoZEThWzQ0xMF3",
	"8pfer1PGDbTUeexBunKpNhfLG7tQ3qqs/Iy/PHOh1/EZSsvyfmgvCG9UWXQQsSjolchJNKwuVFZu0LGK",
	"PK+u/GruQrsjpbYG0J0kBXvncNyM0Ijn6jrrK3wjFukbM0/cv0mclBj4sV45IpQKrkMQQKqycqM4d3vv",
	"TThDRvmyaMQKMP8jAi4Znel5Hk7eWdKT1Ip3we5P03K8vZQMcPX/2rx4ffzq+P8HAAD//+U5S3ltvQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
